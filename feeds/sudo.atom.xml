<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mind Drops - sudo</title><link href="https://dmitry.khlebnikov.net/" rel="alternate"/><link href="https://dmitry.khlebnikov.net/feeds/sudo.atom.xml" rel="self"/><id>https://dmitry.khlebnikov.net/</id><updated>2023-02-21T19:48:39+11:00</updated><subtitle>assorted bits of wit</subtitle><entry><title>Should we use "sudo" for day-to-day activities?</title><link href="https://dmitry.khlebnikov.net/2015/07/18/should-we-use-sudo-for-day-to-day-activities/" rel="alternate"/><published>2015-07-18T20:04:00+10:00</published><updated>2023-02-21T19:48:39+11:00</updated><author><name>(GalaxyMaster)</name></author><id>tag:dmitry.khlebnikov.net,2015-07-18:/2015/07/18/should-we-use-sudo-for-day-to-day-activities/</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#history"&gt;History&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#people-are-saying-sudo-is-good-is-it-true"&gt;People are saying &amp;ldquo;sudo&amp;rdquo; is good. Is it true?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-the-problem-with-the-sudo-approach"&gt;What is the problem with the &amp;ldquo;sudo&amp;rdquo; approach?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-light-side-of-sudo-is-there-one"&gt;The light side of &amp;ldquo;sudo&amp;rdquo;. Is there one?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-can-we-improve-the-security-of-our-systems-in-relation-to-the-sudo-usage"&gt;How can we improve the security of our systems in relation to the &amp;ldquo;sudo&amp;rdquo; usage?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;None of the systems I administer or supervise have &lt;code&gt;sudo&lt;/code&gt; installed with the
SUID bit set.&lt;/p&gt;
&lt;p&gt;Every time I answer a question on how to do privileged work on these systems
(i.e. do tasks that require administrator privileges) with a proposal to SSH
under a privileged account directly to do such a work, whoever asked …&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#history"&gt;History&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#people-are-saying-sudo-is-good-is-it-true"&gt;People are saying &amp;ldquo;sudo&amp;rdquo; is good. Is it true?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-the-problem-with-the-sudo-approach"&gt;What is the problem with the &amp;ldquo;sudo&amp;rdquo; approach?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-light-side-of-sudo-is-there-one"&gt;The light side of &amp;ldquo;sudo&amp;rdquo;. Is there one?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-can-we-improve-the-security-of-our-systems-in-relation-to-the-sudo-usage"&gt;How can we improve the security of our systems in relation to the &amp;ldquo;sudo&amp;rdquo; usage?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;None of the systems I administer or supervise have &lt;code&gt;sudo&lt;/code&gt; installed with the
SUID bit set.&lt;/p&gt;
&lt;p&gt;Every time I answer a question on how to do privileged work on these systems
(i.e. do tasks that require administrator privileges) with a proposal to SSH
under a privileged account directly to do such a work, whoever asked the
question starts to blabber about how insecure that is, that one should use &lt;code&gt;sudo&lt;/code&gt;,
and that nobody should ever login directly as root.&lt;/p&gt;
&lt;p&gt;I have spent quite some time explaining the misconception behind so-called
&amp;ldquo;secure way to access systems through sudo&amp;rdquo;, so I decided to write up an
article that describes the issues of using that approach and why using &lt;code&gt;sudo&lt;/code&gt;
is actually &lt;em&gt;less secure&lt;/em&gt; than a direct SSH access approach.&lt;/p&gt;
&lt;h2 id="history"&gt;History&lt;/h2&gt;
&lt;p&gt;The following is based on my personal recollection of the history around early
90’s with some references to documents I could quickly find.  Unfortunately, this
is one of the topics that is not so easy to reconstruct in full detail.
Although there may be minor inaccuracies, the outlined view on the history
should be pretty close to the true events that took place.&lt;/p&gt;
&lt;p&gt;Many years ago (but not that far in the past) system administrators were using
&lt;code&gt;telnet&lt;/code&gt; and &lt;code&gt;rsh&lt;/code&gt; to access and administer their servers.  Networks were
simpler and traffic sniffing techniques were common.  Therefore, it was very
easy to eavesdrop on a root account login and to automate the task of gathering
the credentials.  To mitigate the issue to some extent the following approach
was proposed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;login as a non-privileged account first;&lt;/li&gt;
&lt;li&gt;do some stuff;&lt;/li&gt;
&lt;li&gt;if you need privileged account access (e.g. root) switch to it using &lt;code&gt;su&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The idea behind this proposal was that such a sequence makes it harder for a
traffic listener to catch root’s credentials on the wire due to the login
sequence mixed in to the stream of other activities the systems administrator
was doing before escalating their account to the privileged user.&lt;/p&gt;
&lt;p&gt;At approximately the same time discussions started in regard to the dangers
of working as root, that people were tending to work as root for prolonged
periods of time performing tasks that did not require escalated privileges
without proper justification for that behaviour.  As the result of these
discussions the &lt;code&gt;sudo&lt;/code&gt; utility was born.  The utility allowed to bind root
privileges to a restricted set of commands and maintained access controls
through its configuration file in order to allow or deny access to the defined
functionality to specific users/groups.  This allowed systems administrators to
delegate some of the privileged routines to less privileged user/groups. (See
more on the &lt;a href="https://www.sudo.ws/sudo/history.html"&gt;history of sudo&lt;/a&gt; if you are interested).&lt;/p&gt;
&lt;p&gt;Somewhere in early 90’s the two approaches were merged, so the approach became:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;login as a non-privileged account and do your every day tasks;&lt;/li&gt;
&lt;li&gt;once a privileged operation is required execute it through &lt;code&gt;sudo&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Although it seems like a minor optimisation, in fact, this introduced a &lt;em&gt;major
security issue&lt;/em&gt;: previously, the attacker should have needed to listen for
traffic in attempt to figure out when the victim is executing &lt;code&gt;su&lt;/code&gt; and is
providing root&amp;rsquo;s password, but now they did not need to do anything except of
capturing user&amp;rsquo;s password at the beginning of the session (the same problem the
&amp;ldquo;su-after-normal-login&amp;rdquo; approach was trying to solve just reappeared :) ) since
once you know user&amp;rsquo;s password you can use &lt;code&gt;sudo&lt;/code&gt; which authenticates you with
&lt;em&gt;user&amp;rsquo;s&lt;/em&gt; password!&lt;/p&gt;
&lt;p&gt;In 1995, &lt;a href="https://en.wikipedia.org/wiki/Tatu_Yl%C3%B6nen"&gt;Tatu Ylönen&lt;/a&gt; as a response to the issues related to exchanging the
credentials over non-protected, easily sniffable networks released his first
implementation of the SSH protocol as freeware to the public.  Over the next
five years SSH was adopted worldwide and it eventually replaced
&lt;code&gt;telnet&lt;/code&gt;/&lt;code&gt;rlogin&lt;/code&gt;/&lt;code&gt;rsh&lt;/code&gt; for the remote access and management activities in most
places around the globe.&lt;/p&gt;
&lt;p&gt;However, due to inertia the recommended approach of logging in as a
non-privileged account and escalating privileges later somehow survived, is
still followed, and often people don’t even try to analyse and see the flaws of
the approach.&lt;/p&gt;
&lt;h2 id="people-are-saying-sudo-is-good-is-it-true"&gt;People are saying &amp;ldquo;sudo&amp;rdquo; is good. Is it true?&lt;/h2&gt;
&lt;p&gt;&lt;sup&gt;(or looking critically into some common misconceptions re: &amp;ldquo;sudo&amp;rdquo;)&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;So let’s look at the most commonly used &amp;ldquo;pros&amp;rdquo; in favour of using &lt;code&gt;sudo&lt;/code&gt;. For
example, &lt;a href="https://help.ubuntu.com/community/RootSudo"&gt;Ubuntu’s community help page&lt;/a&gt; provides a nice, aggregated list of
benefits provided by &lt;code&gt;sudo&lt;/code&gt; usage in their default installation. Let’s walk
through all of them and see if they are real benefits at all:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The installer has fewer questions to ask.&lt;/p&gt;
&lt;p&gt;This is a very questionable &amp;ldquo;benefit&amp;rdquo; to the end user since it implies
 that the system would do more stuff with escalated privileges behind the
 scenes without the user even knowing it. From the security standpoint it
 just silently expands the attack surface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Users don&amp;rsquo;t have to remember an extra password for occasional use (i.e.
     the root password). If they did, they&amp;rsquo;d be likely to forget it (or record
     it unsafely, allowing anyone to easily crack into their system).&lt;/p&gt;
&lt;p&gt;This is another hard to comprehend &amp;ldquo;benefit&amp;rdquo;. Given that we now have SSH
 and the recommended best practice is to use SSH keys instead of passwords,
 &lt;code&gt;sudo&lt;/code&gt; requires users to memorise yet another password.&lt;/p&gt;
&lt;p&gt;Moreover, the argument in regard to users’ likely behaviour is purely
 speculative and assumptive — to the same extent we can assume that
 password policies make it hard for users to memorise their passwords and
 they would be likely to forget the password (or record it unsafely, …).&lt;/p&gt;
&lt;p&gt;The truth is, the key based authentication solves the issue of the
 requirement to have multiple passwords for multiple accounts.&lt;/p&gt;
&lt;p&gt;There is one place, however, where the discussed &amp;ldquo;benefit&amp;rdquo; is actually
 applicable — local console access (no key authentication there, usually),
 but even there the best practice would be to login directly as root on
 the virtual console if there is such a need (the reason for that is
 quite complicated and in short could be described as the following: there
 are multiple checks and assumptions in the kernel code and the
 accompanying C library on allocating a terminal, spawning a process, etc.
 for root over the same actions performed for a non-privileged user).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It avoids the &amp;ldquo;I can do anything&amp;rdquo; interactive login by default. You will
     be prompted for a password before major changes can happen, which should
     make you think about the consequences of what you are doing.&lt;/p&gt;
&lt;p&gt;This statement also assumes that for some reason people would prefer to
 always login as root and do all of their work under that account.&lt;/p&gt;
&lt;p&gt;In reality users are so used to prefix almost any failed command with
 &lt;code&gt;sudo&lt;/code&gt; that this &amp;ldquo;benefit&amp;rdquo; can be considered as the quite opposite item,
 against &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In a properly configured environment you explicitly need to login as the
 privileged account to do functions that require privileges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sudo adds a log entry of the command(s) run (in /var/log/auth.log). If you
     mess up, you can go back and see what commands were run.&lt;/p&gt;
&lt;p&gt;This statement is also somewhat true, but it does not defend the &lt;code&gt;sudo&lt;/code&gt;
 usage. A proper auditing subsystem is what keeps audit logs no matter how
 activity was performed. Logging of executed commands for user&amp;rsquo;s history
 reasons is the job for the shell.&lt;/p&gt;
&lt;p&gt;The ability of logging is so limited in &lt;code&gt;sudo&lt;/code&gt; that it cannot be used for
 anything except a substitute for the shell history. Just imagine the
 following scenario — a user executes:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;input type="radio" name="code_menu22d170c99ac93a086a7602be42378054ff06028b" class="no-line-numbers icon list-numbered"&gt;&lt;input type="radio" name="code_menu22d170c99ac93a086a7602be42378054ff06028b" class="line-numbers icon list-numbered"&gt;&lt;code class="language-console"&gt;&lt;div class="line"&gt;&lt;a&gt;&lt;/a&gt;&lt;span class="go"&gt;sudo less /var/log/messages&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then types &amp;ldquo;!&amp;rdquo; followed by the Enter/Return key — the user effectively
 now in the root shell and what &lt;code&gt;sudo&lt;/code&gt; will log into its logs has nothing
 to do with what user actually did.&lt;/p&gt;
&lt;p&gt;Instead of relying on &lt;code&gt;sudo&lt;/code&gt;&amp;rsquo;s logging abilities, one should configure
 &lt;code&gt;auditd&lt;/code&gt; and send events to a centralised log aggregator to get audit logs
 that can be trusted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On a server, every cracker trying to brute-force their way in will know it
     has an account named root and will try that first. What they don&amp;rsquo;t know is
     what the usernames of your other users are. Since the root account
     password is locked, this attack becomes essentially meaningless, since
     there is no password to crack or guess in the first place.&lt;/p&gt;
&lt;p&gt;This is such a weak attempt to bring host security into the play that it
 is hard to comment on it without dropping a tear :).&lt;/p&gt;
&lt;p&gt;First, use SSH keys and disable the password authentication on the server
 — this (and not some security through obscurity) will defend the system
 from the brute force attacks.&lt;/p&gt;
&lt;p&gt;Second, protect your remote access entry points with properly configured
 firewall and allow remote access from a defined list of locations only
 (i.e. whitelist authorised locations) — this will shrink the possible
 attack surface of the SSH service considerably.&lt;/p&gt;
&lt;p&gt;Third, nobody actually prevents you from having a different user name with
 uid 0.  The &lt;code&gt;root&lt;/code&gt; account is just an accepted default, the system does not
 really care since it works with numerical UIDs, not with names.  See the
 next point for an option how to achieve that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allows easy transfer for admin rights by adding and removing users from
     groups. When you use a single root password, the only way to de-authorize
     users is to change the root password.&lt;/p&gt;
&lt;p&gt;This is an interesting one: half of the statement is true, another is
 misleading.&lt;/p&gt;
&lt;p&gt;The true part is that you can easily delegate privileged operations using
 &lt;code&gt;sudo&lt;/code&gt;.  All in all, it was the primary goal and requirement of the tool
 creation to provide access delegation.&lt;/p&gt;
&lt;p&gt;The misleading part is that the alternative is to use a single root
 account/password.  The truth is that nobody is limited by a single root
 account: you can create as many as you want and each of them could have
 their own distinct password, e.g.&lt;/p&gt;
&lt;pre class="highlight" data-user="root"&gt;&lt;input type="radio" name="code_menu80241711cfa88755cd6da161ef3c23749590471e" class="no-line-numbers icon list-numbered"&gt;&lt;input type="radio" name="code_menu80241711cfa88755cd6da161ef3c23749590471e" class="line-numbers icon list-numbered"&gt;&lt;code class="language-console"&gt;&lt;div class="line"&gt;&lt;a&gt;&lt;/a&gt;&lt;span class="gp"&gt;[root@localhost ~]# &lt;/span&gt;useradd&lt;span class="w"&gt; &lt;/span&gt;-om&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;/bin/sh&lt;span class="w"&gt; &lt;/span&gt;new_root
&lt;/div&gt;&lt;div class="line"&gt;&lt;a&gt;&lt;/a&gt;&lt;span class="gp"&gt;[root@localhost ~]# &lt;/span&gt;passwd&lt;span class="w"&gt; &lt;/span&gt;new_root&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Better yet, do not set the password and lock the account instead with
 &lt;code&gt;usermod -L new_root&lt;/code&gt; since we are using keys, remember?&lt;/p&gt;
&lt;p&gt;This approach also provides additional accountability since users will
 have separate shell histories, their login attempts will be clearly logged
 under separate names, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sudo can be setup with a much more fine-grained security policy.&lt;/p&gt;
&lt;p&gt;Another half-truth in the list of &amp;ldquo;benefits&amp;rdquo;. The statement is incomplete
 and lacks the part it is comparing the functionality to.  If we are
 comparing a legacy Unix access control system with &lt;code&gt;sudo&lt;/code&gt;, then yes &lt;code&gt;sudo&lt;/code&gt;
 is much more configurable. If we compare &lt;code&gt;sudo&lt;/code&gt; with, say, SELinux or
 GRsecurity’s RBAC &amp;ndash; &lt;code&gt;sudo&lt;/code&gt; will lose since both have much more
 fine-grained security controls than &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The root account password does not need to be shared with everybody who
     needs to perform some type of administrative task(s) on the system (see
     the previous bullet).&lt;/p&gt;
&lt;p&gt;As with item #6 this statement assumes for some obscure reason that there
 can be just a single root account in the system.  Therefore, the result of
 such a logical exercise is also questionable since it is based on a wrong
 assumption.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The authentication automatically expires after a short time (which can be
     set to as little as desired or 0); so if you walk away from the terminal
     after running commands as root using sudo, you will not be leaving a root
     terminal open indefinitely.&lt;/p&gt;
&lt;p&gt;This statement also compares &lt;code&gt;sudo&lt;/code&gt; with something reader cannot compare
 to.  Moreover, it mixes up two logically unrelated things: the credentials
 expiration and the terminal security.  While it is great that &lt;code&gt;sudo&lt;/code&gt; implements
 the former, the latter is usually addressed by entirely different means:
 starting with auto-logout functionality, lock screen, physical security,
 etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well, we can continue to critically assess other common statements in regard to
&lt;code&gt;sudo&lt;/code&gt; made mostly by people who do not have any strong Information Security
background, but it would be a waste of time for the readers.&lt;/p&gt;
&lt;p&gt;You can always raise a question regarding some particular claim and/or
assumption related to &lt;code&gt;sudo&lt;/code&gt; and if it is interesting I would add it (and the
corresponding response) to this article.&lt;/p&gt;
&lt;h2 id="what-is-the-problem-with-the-sudo-approach"&gt;What is the problem with the &amp;ldquo;sudo&amp;rdquo; approach?&lt;/h2&gt;
&lt;p&gt;Well, there are several in fact. The most pressing issue is that the usage of
&lt;code&gt;sudo&lt;/code&gt; (or &lt;code&gt;su&lt;/code&gt;, or any other utility that has its SUID bit set) is crossing
the security boundary from the less privileged account to the more privileged
account. This opens doors (or widens the attack surface) to privilege
escalation techniques. In plain English it makes the non-privileged account to
be essentially equal to the privileged one, let me explain by a fairly simple
example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;imagine if you are a developer and you work on a server under your
     non-privileged account;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;as a part of your daily routine you need to download some third party
     package and install it (we are going to leave out all the security
     complexities involved with such an activity like verifying signatures,
     using a separate instance to prepare a package for deployment, etc.);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the installation of the package usually requires executing some third
     party code under your non-privileged account. This code was not written by
     you and there is a high chance that you did not read/verify the foreign
     code line by line in order to ensure that it does not do anything
     malicious since this would be quite time consuming, would require a lot of
     effort, and your team has more important priorities than this (remember,
     this is an example based on situations you would encounter in the real
     world, which is by no means perfect);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it happens, that that particular third party was compromised and some
     malicious code has been injected into the package installation routines;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;after the execution of the installation routine (and the malicious code
     for that matter) your &lt;code&gt;~/.bashrc&lt;/code&gt; (for example) is modified in such a way
     that each time you login it starts up a key logger or some other kind of
     remotely controllable piece of software that talks back to its master;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So far we just got an issue localised to this non-privileged account only (with
a possibility to spread across the entire fleet of servers that non-privileged
account has access to in case of the NFS mounted home directories). Is this
bad? Yes, it is since it may disrupt this particular project, steal reachable
sensitive information, could be used as a trampoline to jump start further
research and exploitation of other vulnerable resources. Is it critically bad?
Not necessarily. If the systems are built properly with host-based security in
mind, if the proper privilege separation techniques are used throughput the
company infrastructure, etc. the impact is localised and with proper monitoring
systems it would be detected eventually and investigated (keep in mind that it
is really hard for a non-privileged account to hide their activities from more
privileged processes).&lt;/p&gt;
&lt;p&gt;Now, let’s add &lt;code&gt;sudo&lt;/code&gt; to the mix, e.g. suddenly the developer decided to
install an additional library package into the system. So, what would happen
next? You guessed it: the developer would need to type in their password to
convince &lt;code&gt;sudo&lt;/code&gt; that they are &amp;ldquo;allowed&amp;rdquo; to do such a privileged thing as
installing a system package, the malicious software installed by the attacker
would happily intercept that and send it back to its master.&lt;/p&gt;
&lt;p&gt;From this point on, the attacker has the account password of the account where
their software runs and which they control. The attacker can now utilise &lt;code&gt;sudo&lt;/code&gt;
powers at their will. The security impact would be ranging from &amp;ldquo;high&amp;rdquo; to
&amp;ldquo;extreme&amp;rdquo; depending on how committed the attackers are.&lt;/p&gt;
&lt;p&gt;Following the logic, why would we want to introduce an additional complexity
that does not address the issue it was supposed to address, which is &amp;ldquo;to limit
exposure of the root account&amp;rdquo;?&lt;/p&gt;
&lt;h2 id="the-light-side-of-sudo-is-there-one"&gt;The &lt;em&gt;light&lt;/em&gt; side of &amp;ldquo;sudo&amp;rdquo;. Is there one?&lt;/h2&gt;
&lt;p&gt;So, is &lt;code&gt;sudo&lt;/code&gt; any good for anything? Actually, yes, it is. All in all, &lt;code&gt;sudo&lt;/code&gt;
is a tool that attracts a lot of attention from the security researchers and
auditors, its codebase got numerous peer reviews and the functionality the tool
provides can be used for good. The following scenarios come to my mind right
away:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On a SELinux enabled system it seems that &lt;code&gt;sudo&lt;/code&gt; is the only properly
   implemented and reliable way to assume a different SELinux role. All other
   mechanisms are either lacking in the functionality or just do it half way
   leaving some artefacts behind;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unless some effort is put into tweaking the way PAM (Pluggable
   Authentication Modules, an authentication framework used on Linux, Solaris,
   and some other Unix-like systems) authenticates users on LDAP enabled
   systems there is no easy way to have two separate accounts (a privileged and
   a non-privileged account) for the same LDAP user. This could be addressed
   administratively (e.g. by defining additional privileged users in LDAP) or
   technically by implementing account names’ prefixes. However, if there are
   budgetary and/or time constraints to implement the proper security framework
   &lt;code&gt;sudo&lt;/code&gt; with a quite restricted configuration would be an acceptable
   compromise.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, personally, I failed to find any other justified applications of
&lt;code&gt;sudo&lt;/code&gt; in a secure environment and would be happy to get some feedback if you
have something in mind worth including into the list above.&lt;/p&gt;
&lt;p&gt;It is worth to mention that in the first scenario (SELinux roles), &lt;code&gt;sudo&lt;/code&gt; should
not have the SUID bit set since normal SELinux users could assume roles with
&lt;code&gt;newrole&lt;/code&gt;.  The difficulty arises when an administrator tries to assume a user
role (e.g. such a role transition is not prescribed in the policy).  One could
argue that either the SELinux policy should be amended and, then, &lt;code&gt;newrole&lt;/code&gt; could
be used or such a behaviour of the administrator account should not be allowed at
all.  However, in real life, administrators need to see the world through users&amp;rsquo;
eyes from time to time to expedite the troubleshooting process, in these cases
&lt;code&gt;sudo&lt;/code&gt; will help, but since it is going to be executed by an administrator (a
privileged account) to switch to a user (a low privileged account) there is no
need for any other permissions as &lt;code&gt;0100&lt;/code&gt; (execute for the owner) on the &lt;code&gt;sudo&lt;/code&gt;
binary.&lt;/p&gt;
&lt;h2 id="how-can-we-improve-the-security-of-our-systems-in-relation-to-the-sudo-usage"&gt;How can we improve the security of our systems in relation to the &amp;ldquo;sudo&amp;rdquo; usage?&lt;/h2&gt;
&lt;p&gt;OK, so we got to the point where we are standing at a crossroad and we kind
of established that excessive usage of &lt;code&gt;sudo&lt;/code&gt; is a bad thing (for
security-paranoid readers - read: &amp;ldquo;almost any usage of &lt;code&gt;sudo&lt;/code&gt; except for
changing SELinux roles on a SELinux-enabled system is a bad thing&amp;rdquo;). So, what
is the alternative way of doing things? Well, there is a complex approach on
addressing and minimising the privilege escalation risks and roughly it can be
summarised as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;apply the &lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege"&gt;least privilege principle&lt;/a&gt; to everything&lt;/p&gt;
&lt;p&gt;For example, if you need to work on content, the account you use to log
into the remote server should be allowed to do just that. This sounds a bit
extreme, so we may re-phrase it as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a name="quote-least-privilege" href="#quote-least-privilege"&gt;&lt;/a&gt;
Each account should be provided the least number of required privileges
to do specific tasks under that account and should not be used for
anything else outside the defined set of activities.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Again, if you include &amp;ldquo;becoming root&amp;rdquo; into the list of defined activities
it would kind of defeat the purpose, so please resist this temptation. :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;there should be a defined list of accounts which are allowed to do
    system-wide modifications (e.g. privileged accounts)&lt;/p&gt;
&lt;p&gt;In line with the previous bullet point, these accounts must be used for
these activities only (system updates, installing new software, modifying
system-wide configuration).  The expectation is that the privileged
accounts are used on an occasion only;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;privileged accounts during their activities should not cross the security
    boundary with the less privileged accounts.&lt;/p&gt;
&lt;p&gt;This is needed to avoid attacks from the less privileged accounts toward
more privileged (e.g. process hijacking, file races, etc.). Unfortunately,
this point is a bit confusing without a proper explanation and that may take
several blog posts to be fully covered, but in a nutshell it means that
root should not touch anything writable by the less privileged account.
Some examples of the bad and insecure behaviour include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;changing directory to a directory writable by non-root,&lt;/li&gt;
&lt;li&gt;executing scripts from a directory writable by non-root accounts or
    scripts that are writable by non-root,&lt;/li&gt;
&lt;li&gt;copying a file/directory from/to a directory writable by non-root
    accounts,&lt;/li&gt;
&lt;li&gt;and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if possible (and this is &lt;em&gt;highly&lt;/em&gt; recommended) privileged accounts should be
    accessed from the trusted and secure machines.&lt;/p&gt;
&lt;p&gt;It is really hard to define what the &amp;ldquo;trusted and secure machine&amp;rdquo; is, but
generally it should be assumed&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;that it is a laptop or a desktop station that is used entirely for the
    work purposes (no free time surfing on the leisure sites and stuff :) ),&lt;/li&gt;
&lt;li&gt;that proper firewall rules and protection techniques were used to secure
    the machine, and&lt;/li&gt;
&lt;li&gt;that the operator is security-minded person and does everything they
    can to ensure integrity and security of their machine and software
    installed on it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would be really happy to answer any question in regard to this article and
provide any possible help in making our everyday system level activities more
secure, so do not hesitate to comment or &lt;a href="/contact"&gt;contact me&lt;/a&gt;.&lt;/p&gt;</content><category term="sudo"/><category term="sudo"/><category term="console"/></entry></feed>