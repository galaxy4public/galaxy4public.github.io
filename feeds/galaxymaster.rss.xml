<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mind Drops - (GalaxyMaster)</title><link>https://dmitry.khlebnikov.net/</link><description>assorted bits of wit</description><atom:link href="https://dmitry.khlebnikov.net/feeds/galaxymaster.rss.xml" rel="self"/><lastBuildDate>Mon, 20 Oct 2025 13:23:43 +1100</lastBuildDate><item><title>Samsung CSC Change Using Modem Commands</title><link>https://dmitry.khlebnikov.net/2025/10/09/samsung-csc-change-using-modem-commands/</link><description>&lt;p&gt;A technical guide for manually changing the Country Service Code (CSC)
on modern Samsung phones, motivated by author&amp;rsquo;s need to switch from
Australia (XSA) to a region like Indonesia (XID) to enable features such as
automated call recording. The author notes that older methods of flashing
CSC images were no longer effective on new devices and sought an
alternative to the popular Windows-only SamFW tool, as they use macOS. The
solution involves replicating the tool&amp;rsquo;s method of sending modem AT commands
over a Serial-over-USB connection. The process requires enabling specific
developer options on the phone, entering a diagnostic mode through the dialler,
connecting to the device&amp;rsquo;s modem endpoint with a terminal program, and issuing
a sequence of AT commands to set the new CSC before rebooting the phone.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Thu, 09 Oct 2025 15:30:00 +1100</pubDate><guid>tag:dmitry.khlebnikov.net,2025-10-09:/2025/10/09/samsung-csc-change-using-modem-commands/</guid><category>hacks</category><category>hacks</category><category>howto</category><category>console</category></item><item><title>macOS builtin VPN client tricks</title><link>https://dmitry.khlebnikov.net/2022/11/25/macos-builtin-vpn-client-tricks/</link><description>&lt;p&gt;A post that explains how to overcome the limitations of the macOS
built-in VPN client, which the author finds lacks flexibility in its GUI and
exposes only a fraction of its supported features. Despite these issues often
leading users to third-party apps, the author finds the native client is
usually sufficient. The work-in-progress guide uses Windscribe VPN as an
example to demonstrate how to configure the client for most IKEv2 VPN services.
This is achieved by using an Apple Configuration Profile with custom XML
settings, which can produce a working connection where the standard GUI
configuration fails.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Fri, 25 Nov 2022 13:33:00 +1100</pubDate><guid>tag:dmitry.khlebnikov.net,2022-11-25:/2022/11/25/macos-builtin-vpn-client-tricks/</guid><category>macos</category><category>macos</category><category>howto</category><category>vpn</category></item><item><title>Fixing "Content wider than screen"</title><link>https://dmitry.khlebnikov.net/2021/09/03/fixing-content-wider-than-screen/</link><description>&lt;p&gt;The post provides a step-by-step guide for debugging the &amp;ldquo;Content
wider than screen&amp;rdquo; mobile usability error reported by Google Search Console,
even when the issue isn&amp;rsquo;t visually apparent. The author demonstrates how to use
Chrome DevTools, specifically the &amp;ldquo;Layers&amp;rdquo; view, to identify the root cause. By
inspecting the layer hierarchy, one can spot elements with unusually large
dimensions that extend far beyond the document&amp;rsquo;s viewport, causing the error.
The process involves finding these oversized layers, locating the corresponding
element in the DOM tree, and analyzing its CSS to understand why it&amp;rsquo;s being
rendered off-screen. In the author&amp;rsquo;s case, the problem was caused by a CSS
technique intended to hide a label for screen readers by pushing it far to the
left, which was fixed by applying overflow: hidden and opacity: 0 to contain
the element without affecting its accessibility.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Fri, 03 Sep 2021 13:00:00 +1000</pubDate><guid>tag:dmitry.khlebnikov.net,2021-09-03:/2021/09/03/fixing-content-wider-than-screen/</guid><category>web design</category><category>html</category><category>css</category><category>design</category></item><item><title>Truly Responsive Pagination</title><link>https://dmitry.khlebnikov.net/2020/06/14/truly-responsive-pagination/</link><description>&lt;p&gt;This post details author&amp;rsquo;s process for creating a truly responsive
pagination widget using only HTML and CSS. The goal was to build a widget that
maintains its appearance across different viewport sizes by omitting middle
page numbers when space is limited, without compromising accessibility for
screen readers. After exploring flexbox, the author developed a solution that
divides the pagination list into three parts (&amp;ldquo;head,&amp;rdquo; &amp;ldquo;middle,&amp;rdquo; and &amp;ldquo;tail&amp;rdquo;) and
uses row-reverse on the &amp;ldquo;tail&amp;rdquo; section to ensure the first and last page
numbers remain visible during resizing. A pseudo-element with a dotted border
is used to visually indicate omitted pages. Despite creating a workable
solution, the author notes remaining challenges, including accessibility issues
caused by reversing the list order in the HTML and an edge case where omission
indicators appear incorrectly.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Sun, 14 Jun 2020 20:07:00 +1000</pubDate><guid>tag:dmitry.khlebnikov.net,2020-06-14:/2020/06/14/truly-responsive-pagination/</guid><category>web design</category><category>html</category><category>css</category><category>design</category></item><item><title>Automating Static Website Deployment</title><link>https://dmitry.khlebnikov.net/2020/05/17/automating-static-website-deployment/</link><description>&lt;p&gt;A comprehensive guide to setting up a fully automated deployment
pipeline for a static website using a private source repository and a
public GitHub Pages repository. The author details a process that
leverages GitHub Actions to build a Pelican-based site from a private
repository — keeping API tokens and experimental code secure—and then deploys the
generated static files to a public repository for hosting. Key steps include
configuring separate public and private repositories, using a deploy key for
secure authentication instead of a personal access token, and creating a
detailed GitHub Action workflow. This workflow automates checking out both
repositories, restoring file modification times for accurate content
generation, installing dependencies, building the site with Pelican, and
committing the changes to the public GitHub Pages repository only if new
content has been generated.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Sun, 17 May 2020 21:32:00 +1000</pubDate><guid>tag:dmitry.khlebnikov.net,2020-05-17:/2020/05/17/automating-static-website-deployment/</guid><category>blog</category><category>pelican</category><category>blog</category><category>github</category></item><item><title>Wrap indicator in &lt;pre&gt; blocks</title><link>https://dmitry.khlebnikov.net/2020/05/10/wrap-indicator-in-pre-blocks/</link><description>&lt;p&gt;This post presents a pure CSS-based solution for adding a visual wrap
indicator to lines within &lt;pre&gt; code blocks to improve responsiveness and
readability. The author was annoyed that long lines wrap without any clear
indication, making code blocks difficult to read. The method involves wrapping
each physical line of text within the &lt;pre&gt; tag in its own &lt;div&gt;. Using the
::after pseudo-element on these divs, a repeating background image is
positioned just outside the text block. A clever CSS clip trick is then used
to hide the indicator on the last segment of a wrapped line, creating a clean
and intuitive visual cue. The author also details a &amp;ldquo;bonus round&amp;rdquo; method for
placing the indicator on the left side and notes the challenges of
integrating this semantic HTML structure with syntax highlighters like
PrismJS, for which they developed a custom plugin.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Sun, 10 May 2020 21:00:00 +1000</pubDate><guid>tag:dmitry.khlebnikov.net,2020-05-10:/2020/05/10/wrap-indicator-in-pre-blocks/</guid><category>web design</category><category>html</category><category>css</category><category>design</category></item><item><title>Migrating blog to Pelican</title><link>https://dmitry.khlebnikov.net/2020/05/01/migrating-blog-to-pelican/</link><description>&lt;p&gt;Dissatisfied with the Blogger platform&amp;rsquo;s changing features and lack of
control, the author decided to migrate their decade-old blog to a self-hosted,
low-maintenance solution. After researching static site generators (SSGs) that
aligned with Jamstack principles and met their requirements for stability,
extensibility, and language (preferring Python), they chose Pelican over
contenders like Jekyll and Gatsby. The author then undertook a significant
theme development project, initially attempting to port an existing HTML theme
called &amp;ldquo;Striped&amp;rdquo; but ultimately deciding to recreate a similar theme from
scratch due to inconsistencies in the original code. The resulting website is
the foundation for a planned series of posts about the development process and
infrastructure.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Fri, 01 May 2020 20:00:00 +1000</pubDate><guid>tag:dmitry.khlebnikov.net,2020-05-01:/2020/05/01/migrating-blog-to-pelican/</guid><category>blog</category><category>pelican</category><category>blog</category></item><item><title>nginx + a backend with a dynamic IP (e.g. AWS ELB)</title><link>https://dmitry.khlebnikov.net/2017/01/13/nginx-a-backend-with-a-dynamic-ip-eg-aws-elb/</link><description>&lt;p&gt;This post presents a non-intrusive solution for NGINX to connect to
backend servers with dynamic IP addresses, such as an AWS ELB, replacing a
previous method that involved a now-unstable patch. The new approach uses
systemd-socket-proxyd, a utility that forwards traffic from a local socket to a
remote target. The configuration involves setting up NGINX to pass FastCGI
requests to a local Unix socket, which is then monitored by a systemd socket
unit. When a request arrives, systemd activates the systemd-socket-proxyd
service, which resolves the backend&amp;rsquo;s dynamic domain name and proxies the
connection. The author also provides template unit files for reusability and a
custom SELinux policy to ensure the proxy service runs securely with the least
privilege principle.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Fri, 13 Jan 2017 10:00:00 +1100</pubDate><guid>tag:dmitry.khlebnikov.net,2017-01-13:/2017/01/13/nginx-a-backend-with-a-dynamic-ip-eg-aws-elb/</guid><category>hacking</category><category>nginx</category><category>patch</category></item><item><title>Dynamic resolution of upstream servers in nginx</title><link>https://dmitry.khlebnikov.net/2016/09/20/dynamic-resolution-of-upstream-servers-in-nginx/</link><description>&lt;p&gt;A &amp;ldquo;howto&amp;rdquo; post which details a custom patch created for the community
version of NGINX to enable the dynamic DNS resolution of upstream servers. This
functionality addresses the challenge of working with cloud load balancers,
whose IP addresses can change automatically, a feature not supported in the
free version. The patch implements a resolve keyword compatible with the
commercial NGINX version, ensuring seamless configuration if a user decides to
upgrade. While used successfully in production, the author notes this approach
is now outdated and has been superseded by a method using
systemd-socket-proxyd.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Tue, 20 Sep 2016 10:00:00 +1000</pubDate><guid>tag:dmitry.khlebnikov.net,2016-09-20:/2016/09/20/dynamic-resolution-of-upstream-servers-in-nginx/</guid><category>hacking</category><category>nginx</category><category>patch</category></item><item><title>Transparent SSH host-jumping (Expert)</title><link>https://dmitry.khlebnikov.net/2016/07/26/transparent-ssh-host-jumping-expert/</link><description>&lt;p&gt;This post presents an expert-level solution for transparent SSH
host-jumping that enhances a previous method by allowing different usernames
and ports for each host in the connection chain. The author created a custom
Bash script to be used with the ProxyCommand directive in the SSH config, which
parses a new connection syntax like userA^hostA/userB^hostB:port/hostC. This
script dynamically handles the unique credentials for each intermediate host
while still leveraging SSH&amp;rsquo;s connection multiplexing features like
ControlMaster and ControlPersist to reuse connections and improve performance.
The solution addresses the limitations of the prior &amp;ldquo;Advanced&amp;rdquo; method, offering
greater flexibility for navigating complex network environments with varied
host configurations.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Tue, 26 Jul 2016 10:00:00 +1000</pubDate><guid>tag:dmitry.khlebnikov.net,2016-07-26:/2016/07/26/transparent-ssh-host-jumping-expert/</guid><category>ssh</category><category>console</category><category>ssh</category><category>howto</category></item><item><title>SSH: Interactive ProxyCommand</title><link>https://dmitry.khlebnikov.net/2016/07/25/ssh-interactive-proxycommand/</link><description>&lt;p&gt;This post demonstrates a solution to a common misconception that SSH&amp;rsquo;s
ProxyCommand does not support interactive scripts, a problem the author
encountered while working on the sshephalopod authentication project. The
author proves interactivity is possible by creating a wrapper script that
cleverly manipulates file descriptors. The script first saves the original
standard input (descriptor 0) and standard output (descriptor 1), which are
used for the SSH protocol, to new descriptors (10 and 11). It then redirects
standard input and output to the user&amp;rsquo;s terminal (via standard error,
descriptor 2), allowing for interactive prompts. After the interaction is
complete, the script restores the original file descriptors before executing
the final command (like nc) to establish the proxied SSH connection, thus
enabling interactive authentication or other user inputs within the
ProxyCommand workflow.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Mon, 25 Jul 2016 10:00:00 +1000</pubDate><guid>tag:dmitry.khlebnikov.net,2016-07-25:/2016/07/25/ssh-interactive-proxycommand/</guid><category>ssh</category><category>ssh</category><category>console</category></item><item><title>Raspberry Pi 3 toolchain on CentOS 7</title><link>https://dmitry.khlebnikov.net/2016/05/22/raspberry-pi-3-toolchain-on-centos-7/</link><description>&lt;p&gt;This post provides a detailed walkthrough of building a
cross-compilation toolchain for a Raspberry Pi 3 on a CentOS 7 server to
accelerate software development. Motivated by a project to modify his car&amp;rsquo;s CAN
bus system using a Raspberry Pi, the author found on-device compilation to be
too slow and opted to create a toolchain on a more powerful AWS EC2 instance.
The process involves using the crosstool-ng project to configure and build the
toolchain, with specific configuration adjustments detailed for targeting the
ARMv8-A architecture and Cortex-A53 CPU of the Raspberry Pi 3. After the
hour-long build process, the author demonstrates the toolchain&amp;rsquo;s success by
compiling a simple &amp;ldquo;Hello&amp;rdquo; world program and verifying that the resulting
binary is a 64-bit ARM executable, ready for use on the target device.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Sun, 22 May 2016 12:00:00 +1000</pubDate><guid>tag:dmitry.khlebnikov.net,2016-05-22:/2016/05/22/raspberry-pi-3-toolchain-on-centos-7/</guid><category>linux</category><category>console</category><category>howto</category><category>linux</category><category>raspberry pi</category></item><item><title>Building a firewall? Simple and easy!</title><link>https://dmitry.khlebnikov.net/2016/05/22/building-a-firewall-simple-and-easy/</link><description>&lt;p&gt;This post advocates for building simple, elegant, and secure firewall
rulesets, arguing that overly complex configurations are difficult to manage
and audit. The author suggests that most firewall needs can be met with fewer
than 20 well-defined rules by focusing on four key prerequisites: understanding
networking fundamentals, mapping traffic flows with diagrams, clearly defining
firewall goals (e.g., allowing inbound access and restricting outbound), and
knowing the specific firewall toolset, like iptables. A real-world example is
provided with a 13-rule iptables configuration for a NAT gateway, which
establishes a default-deny policy for incoming traffic while allowing
established connections, essential ICMP traffic, and specific services like
SSH, demonstrating that a secure and effective firewall doesn&amp;rsquo;t need to be
convoluted.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Sun, 22 May 2016 10:00:00 +1000</pubDate><guid>tag:dmitry.khlebnikov.net,2016-05-22:/2016/05/22/building-a-firewall-simple-and-easy/</guid><category>linux</category><category>console</category><category>howto</category><category>iptables</category><category>linux</category><category>security</category></item><item><title>Transparent SSH host-jumping (Advanced)</title><link>https://dmitry.khlebnikov.net/2015/08/06/transparent-ssh-host-jumping-advanced/</link><description>&lt;p&gt;This post presents an advanced SSH configuration to transparently
connect to a target host through one or more intermediate &amp;ldquo;jump&amp;rdquo; hosts,
addressing the inconvenience of managing numerous LocalForward entries in the
~/.ssh/config file. The solution uses a &amp;ldquo;Host &lt;em&gt;/&lt;/em&gt;&amp;rdquo; pattern and a ProxyCommand
directive, allowing a user to connect with a simple command like ssh
user@hostA/hostB/hostC. To overcome the inefficiency of creating new
connections for every session, the author further refines the ProxyCommand to
leverage SSH&amp;rsquo;s connection multiplexing features, ControlMaster, ControlPath,
and ControlPersist. This improved setup reuses already established connections,
significantly speeding up subsequent logins and keeping idle background
connections alive for a set period, which optimises the workflow for accessing
hosts in complex, non-directly reachable network environments.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Thu, 06 Aug 2015 10:00:00 +1000</pubDate><guid>tag:dmitry.khlebnikov.net,2015-08-06:/2015/08/06/transparent-ssh-host-jumping-advanced/</guid><category>ssh</category><category>console</category><category>ssh</category><category>howto</category></item><item><title>Should we use "sudo" for day-to-day activities?</title><link>https://dmitry.khlebnikov.net/2015/07/18/should-we-use-sudo-for-day-to-day-activities/</link><description>&lt;p&gt;This article challenges the common belief that using sudo for daily
administrative tasks is more secure than directly logging in as a privileged
user via SSH. The author argues that the practice of using sudo is a holdover
from the pre-SSH era of insecure networks and that with modern key-based SSH
authentication, its security benefits are largely misconceptions. A significant
risk highlighted is that sudo expands the attack surface; if a user&amp;rsquo;s
non-privileged account is compromised by malware (like a keylogger), the
attacker can capture the user&amp;rsquo;s password during a sudo operation and gain full
administrative access. The author contends that a more secure approach is to
use separate, dedicated privileged accounts for administrative tasks, accessed
directly via SSH from trusted machines, thereby enforcing a stronger separation
of privileges and minimizing the risk of privilege escalation from a
compromised user account.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Sat, 18 Jul 2015 20:04:00 +1000</pubDate><guid>tag:dmitry.khlebnikov.net,2015-07-18:/2015/07/18/should-we-use-sudo-for-day-to-day-activities/</guid><category>sudo</category><category>sudo</category><category>console</category></item><item><title>SSH port-forwarding (Intermediate)</title><link>https://dmitry.khlebnikov.net/2010/12/10/ssh-port-forwarding-intermediate/</link><description>&lt;p&gt;This post introduces the basics of SSH port forwarding as a secure
alternative to exposing services like a MySQL database to the public internet.
The author explains that instead of binding a database to a public IP address,
which poses security risks, one can keep it running on a private or loopback
interface (like 127.0.0.1:3306) on the remote server. By using a local port
forwarding command, such as ssh -L3306:127.0.0.1:3306 user@server, a secure
tunnel is created over the SSH connection. This makes the remote database
accessible on the user&amp;rsquo;s local machine as if it were running locally, allowing
the use of local database management tools like MySQL WorkBench without
compromising security.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Fri, 10 Dec 2010 10:00:00 +1100</pubDate><guid>tag:dmitry.khlebnikov.net,2010-12-10:/2010/12/10/ssh-port-forwarding-intermediate/</guid><category>ssh</category><category>ssh</category><category>console</category></item><item><title>SSH port-forwarding (Basic)</title><link>https://dmitry.khlebnikov.net/2010/11/29/ssh-port-forwarding-basic/</link><description>&lt;p&gt;An introduction into the world of SSH port-forwarding and how to
leverage it to access resources in private subnets&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Mon, 29 Nov 2010 10:00:00 +1100</pubDate><guid>tag:dmitry.khlebnikov.net,2010-11-29:/2010/11/29/ssh-port-forwarding-basic/</guid><category>ssh</category><category>ssh</category><category>console</category><category>bastion</category></item><item><title>HOWTO: VMware Player as a remote console (VNC)</title><link>https://dmitry.khlebnikov.net/2010/11/24/howto-vmware-player-as-a-remote-console-vnc/</link><description>&lt;p&gt;Turning VMware Player into a non-privileged VNC client to access&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">(GalaxyMaster)</dc:creator><pubDate>Wed, 24 Nov 2010 10:00:00 +1100</pubDate><guid>tag:dmitry.khlebnikov.net,2010-11-24:/2010/11/24/howto-vmware-player-as-a-remote-console-vnc/</guid><category>hacking</category></item></channel></rss>