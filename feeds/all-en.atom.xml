<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mind Drops</title><link href="https://dmitry.khlebnikov.net/" rel="alternate"></link><link href="https://dmitry.khlebnikov.net/feeds/all-en.atom.xml" rel="self"></link><id>https://dmitry.khlebnikov.net/</id><updated>2020-05-17T20:25:15+10:00</updated><entry><title>Wrap indicator in &lt;pre&gt; blocks</title><link href="https://dmitry.khlebnikov.net/2020/05/10/wrap-indicator-in-pre-blocks/" rel="alternate"></link><published>2020-05-10T21:00:00+10:00</published><updated>2020-05-17T20:25:15+10:00</updated><author><name>(GalaxyMaster)</name></author><id>tag:dmitry.khlebnikov.net,2020-05-10:/2020/05/10/wrap-indicator-in-pre-blocks/</id><summary type="html">&lt;p&gt;I am not a front-end developer, not a UI designer, nor a UX guru, but I am an
engineer, so when I face a puzzle worth solving my brain switches on and I
cannot let it go until I find a satisfactory solution to the puzzle.&lt;/p&gt;
&lt;p&gt;My blog heavily relies on me sharing session dumps and file excerpts using the
code blocks.  I am using &lt;a href="https://prismjs.com"&gt;PrismJS&lt;/a&gt; to highlight syntax in these blocks.  However,
after a while I found that there is one thing that really irritates me: these
code blocks are not designed to be truly responsive, for instance &amp;ndash; when &lt;span class="truncated"&gt;&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am not a front-end developer, not a UI designer, nor a UX guru, but I am an
engineer, so when I face a puzzle worth solving my brain switches on and I
cannot let it go until I find a satisfactory solution to the puzzle.&lt;/p&gt;
&lt;p&gt;My blog heavily relies on me sharing session dumps and file excerpts using the
code blocks.  I am using &lt;a href="https://prismjs.com"&gt;PrismJS&lt;/a&gt; to highlight syntax in these blocks.  However,
after a while I found that there is one thing that really irritates me: these
code blocks are not designed to be truly responsive, for instance &amp;ndash; when a
line wraps there is no easy to spot indication that such a wrap happened.&lt;/p&gt;
&lt;p&gt;I quick search on the topic highlighted that this is kind of an unresolved
issue and I found just &lt;a href="https://blog.iany.me/2012/02/css-line-wrap-indicator/"&gt;&lt;em&gt;one&lt;/em&gt; blog post&lt;/a&gt; from 2012 by Ian Yang
after I already implemented my solution.&lt;/p&gt;
&lt;p&gt;The approaches are quite close, but I like mine better since I think it is more
semantically correct (I am using &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; and I did a bit
deeper research into how to make it universal).&lt;/p&gt;
&lt;p&gt;So, below I present you with my version of the solution and I would appreciate
any feedback you may have, especially if it could help to find a nicer solution
in the end.&lt;/p&gt;
&lt;p&gt;Before we dive into details on how I come up with the solution, feel free to
play with the basic demo &amp;ndash; try to resize the box by dragging the bottom right
corner and see how the text inside responds (if you are using anything than
the Chrome browser you may be out of luck with the resizable &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s, sorry):&lt;/p&gt;
&lt;div class="demo resizable"&gt;
    &lt;style&gt;
        div[class^='demo'].resizable {
            position: relative;
            overflow: auto;
            resize: both;
            border: solid 0.25em rgba(0,0,0,0.5);
            max-width: 100%;
            min-width: 4.1em;
            padding: 0.6em 1.2em;
            border-radius: 0.5em;
            margin-bottom: 1.5em;
        }

        div[class^='demo'] pre {
            word-break: break-word;
            word-wrap: break-word;
            overflow-wrap: break-word;
            white-space: pre-wrap;
            font-size: 1em;
            line-height: 1.2;
        }

        div.demo pre div.line {
            position: relative;
            min-height: 1em;
        }

        div.demo pre div.line::after {
            content: '';
            position: absolute;
            display: block;
            font-family: inherit;
            font-size: inherit;
            width: 1.2em;
            right: -1.2em;
            background-size: 1.2em 1.2em;
            margin-bottom: 1.2em;
            clip: rect(1.2em 1.2em 100vh 0);
            height: 100%;
            bottom: 0;
            opacity: .5;
            background:
                url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDI0IDI0Ij48dGV4dCB4PSIwIiB5PSIxOSI+JiN4MjNjZTs8L3RleHQ+PC9zdmc+Cg==)
                no-repeat repeat;
        }
    &lt;/style&gt;
    &lt;pre&gt;&lt;div class="line"&gt;This is quite a long line.  It is long enough to ensure that it will wrap no matter how big your screen is.  Well, it is possible that in 20 years from the moment I type this humanity will invent a medium that could display the whole line with no breaks, but until then it should be good enough for the demonstration purposes.&lt;/div&gt;&lt;div class="line"&gt;A very short line.&lt;/div&gt;&lt;div class="line"&gt;The short line above is used to demonstrate that it stays clear of additional info when its neighbour lines are wrapped.&lt;/div&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I hope that demo gods were not angry at me and the demo above worked for you as
expected, so if you want to understand how it works let&amp;rsquo;s dive under the hood
of this solution :)&lt;/p&gt;
&lt;h2 id="preparation"&gt;Preparation&lt;/h2&gt;
&lt;p&gt;First of all, we need to define what we have and what we want to achieve &amp;ndash; it
helps to stay on course, to understand when we reached a solution, and to
assess how good the solution is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we have one or more code blocks expressed through the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; HTML element;&lt;/li&gt;
&lt;li&gt;these code blocks may have continuous white space that we want to preserve;&lt;/li&gt;
&lt;li&gt;our page layout is flexible and there are no guarantees that the width of a
    particular viewport (a window through which a browser renders the visible
    part of the page) is enough to display the whole line of code;&lt;/li&gt;
&lt;li&gt;we want to ensure that layout does not break when a very long code line is
    encountered, so we expect that line to be wrapped to the next line upon
    hitting width of the containing box;&lt;/li&gt;
&lt;li&gt;we need to present the reader (a user who is consuming information) a
    visual indicator that the line was wrapped;&lt;/li&gt;
&lt;li&gt;we also want the syntax highlighter (such as &lt;a href="https://prismjs.com"&gt;PrismJS&lt;/a&gt; in my case) not to be
    affected by whatever we come up with.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think the above quite a solid definition of the goals and requirements for
our little project.  It is time to assess the artefacts we have and what we can
do with them.&lt;/p&gt;
&lt;h2 id="analysis"&gt;Analysis&lt;/h2&gt;
&lt;p&gt;Our primary artefact is the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; element.  It contains the information we
want to share with the world and we want to do this in the most easy to digest
way.&lt;/p&gt;
&lt;p&gt;By default, the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; element is quite a simplistic container.  Its semantic
meaning dictates that the content preserves the original formatting (such as
amount and type of white space on the lines).  The element also provides some
basic functionality: you can define the size of the container and browsers are
supposed to present you with controls to scroll the content if it does not fit
the size of the container.&lt;/p&gt;
&lt;p&gt;The following is just such bare almost not styled &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; block wrapped into a
resizable &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; container, so you could play with the dimensions of the
container (in order to preserve the layout I am keeping the wrapping styles, so
the box would fit into the layout):&lt;/p&gt;
&lt;div class="demo1 resizable"&gt;
    &lt;pre&gt;This is an example of a basic &amp;lt;pre&amp;gt; container.  You should
be able to resize it by dragging the bottom right corner (but if you are
using anything other than Chrome you may be out of luck with the resizing).

This line was made specifically long to trigger the line wrapping, so even those who are using a browser that cannot resize should be able to play with it :)&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, if you played with the above container you may have noticed that at
some point all lines are so mixed up together and it is really hard to tell
that the original text comprised of five separate lines.&lt;/p&gt;
&lt;p&gt;Unfortunately, the CSS standards do not provide any selectors or
pseudo-elements to anchor the soft breaks.  All we can do with the CSS
selectors on the contained text is to choose the first letter (with
&lt;code&gt;:first-letter&lt;/code&gt;) and the first line of the text inside the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; element
(with &lt;code&gt;:first-line&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This is not good enough if you ask me.  I would love to see some CSS selectors
for soft breaks in the future iterations of the standard, but we are not there
yet, so we have to work with what we have got.&lt;/p&gt;
&lt;p&gt;And all we have is the standard &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model" title="Introduction to the CSS box model"&gt;CSS basic box model&lt;/a&gt; presentation focused
selectors such as &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, if we look how text is rendered inside the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; block (browser&amp;rsquo;s
DevTools is a really good tool to do the observations, by the way) we will
notice that the browser considers the entire text as a single entity &amp;ndash; there
are no lines or anything, just a blob of text.&lt;/p&gt;
&lt;p&gt;Therefore, the first piece of the puzzle would be to introduce something that
could make the distinction between different lines of text possible.&lt;/p&gt;
&lt;p&gt;Assuming that we can solve the above issue with introducing lines, the next
step would be to display a marker on the right side of the line.  That marker
should follow the height of the line box as the line wraps.&lt;/p&gt;
&lt;p&gt;Finally, we will need to figure out how not to display the marker on the last
line of the wrapped multiline text to denote the end of wrapped line.&lt;/p&gt;
&lt;h2 id="implementation"&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Since the &lt;a href="https://html.spec.whatwg.org/multipage/grouping-content.html#the-pre-element"&gt;definition of the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; element&lt;/a&gt; only stipulates that the content of
the element is pre-formatted with white space we can use other tags inside,
e.g. we can wrap each physical line (a line that is terminated by a newline
character) in a block element such as &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see how it looks on our sample &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; block when we wrap each physical
line in &lt;code&gt;&amp;lt;div class="line"&amp;gt;&lt;/code&gt;&amp;hellip;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.  Keep in mind that &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is a block
element, so in order not to introduce unintended line breaks we need to ensure
that every newline character in the original text except the very first one is
replaced with the combination of the closing and opening tags such as
&lt;code&gt;&amp;lt;/div&amp;gt;&amp;lt;div class="line"&amp;gt;&lt;/code&gt;, below is the result of such a change on our sample:&lt;/p&gt;
&lt;div class="demo2 resizable"&gt;
&lt;pre&gt;&lt;div class="line"&gt;This is an example of a basic &amp;lt;pre&amp;gt; container.  You should&lt;/div&gt;&lt;div class="line"&gt;be able to resize it by dragging the bottom right corner (but if you are&lt;/div&gt;&lt;div class="line"&gt;using anything than Chrome you may be out of luck with the resizing).&lt;/div&gt;&lt;div class="line"&gt;&lt;/div&gt;&lt;div class="line"&gt;This line was made specifically long to trigger the line wrapping, so even those who are using a browser that cannot resize should be able to play with it :)&lt;/div&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Visually, it is almost exactly the same as the original sample we presented in
the &amp;ldquo;Analysis&amp;rdquo; section, however there is a couple of differences.&lt;/p&gt;
&lt;p&gt;The first one is visual and is obvious: the empty line (the fourth line of the
sample) has collapsed into nothing.  This is an undesired side effect and the
reason for that is that the corresponding &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; block has no content, hence
it has zero height.  We can fix it by defining the &lt;code&gt;min-height&lt;/code&gt; attribute for
out &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s defining line boundaries.&lt;/p&gt;
&lt;p&gt;The second difference is not so obvious, but if you inspect any line of this
&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; block using your browser&amp;rsquo;s DevTools you will see that now we can
differentiate between lines (when you walk through the DOM in your DevTools
your browser will highlight the corresponding line inside the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; block and
this is what we wanted to achieve at this step!&lt;/p&gt;
&lt;p&gt;The next step is to display a marker on the right side of the line and that
marker should occupy the exactly the same height as the line block we are
attaching it to.  Well, this can be easily done with the &lt;code&gt;::after&lt;/code&gt;
pseudo-element:&lt;/p&gt;
&lt;pre id="demo3" class="highlight line-numbers"&gt;&lt;code class="language-css"&gt;pre div.line {
    position: relative; /* so we could position the child */
    min-height: 1em;    /* to avoid collapsing empty lines */
}

pre div.line::after {
    content: '';        /* we need content for pseudo elements */
    position: absolute;
    display: block;
    width: 1em;     /* without width it will be invisible */
    height: 100%;       /* to match the height of the parent */
    top: 0;
    right: -1em;
    background-color: blue; /* temporary, to make it visible */
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we also introduced &lt;code&gt;position: relative&lt;/code&gt; to our &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&amp;lsquo;s.  It is
needed since if we want to position our pseudo-element relative to its parent,
the parent needs to have the position attribute set to anything but &lt;code&gt;static&lt;/code&gt;.
In our context, &lt;code&gt;relative&lt;/code&gt; is the desired positioning for the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element.
The corresponding rendered sample with the above stylesheet applied follows:&lt;/p&gt;
&lt;div class="demo3 resizable"&gt;
    &lt;style&gt;
        div.demo3 pre div.line {
            min-height: 1em;
            position: relative;
        }

        div.demo3 pre div.line::after {
            content: '';
            position: absolute;
            display: block;
            width: 1em;
            height: 100%;
            top: 0;
            right: -1em;
            background-color: blue;
        }
    &lt;/style&gt;
&lt;pre&gt;&lt;div class="line"&gt;This is an example of a basic &amp;lt;pre&amp;gt; container.  You should&lt;/div&gt;&lt;div class="line"&gt;be able to resize it by dragging the bottom right corner (but if you are&lt;/div&gt;&lt;div class="line"&gt;using anything than Chrome you may be out of luck with the resizing).&lt;/div&gt;&lt;div class="line"&gt;&lt;/div&gt;&lt;div class="line"&gt;This line was made specifically long to trigger the line wrapping, so even those who are using a browser that cannot resize should be able to play with it :)&lt;/div&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So far so good!  We have a blue coloured strip hanging on the right side just
next to our text.  Let&amp;rsquo;s style it a bit so it looks more appealing.&lt;/p&gt;
&lt;p&gt;We have a couple of options here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;we can just use a transparent bitmap image with the desired marker;&lt;/li&gt;
&lt;li&gt;we can leverage SVG as the source of the image.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The issue I have with transparent bitmap images is that they are not very
responsive: to accomodate to all the possible resolutions I would end up with
creating many bitmaps of different sizes to ensure that the marker looks good
no matter what device is rendering the page.&lt;/p&gt;
&lt;p&gt;On the other hand, the SVG graphics was not well supported on some browsers
like Internet Explorer 6, etc. &amp;ndash; The support is much better now, hence I would
choose SVG everytime.&lt;/p&gt;
&lt;p&gt;Ideally, I did not want to use an image, but I could not figure out how I could
put a repeating text block next to my lines, hence I found the following
compromise (this is the content of the SVG file I created):&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-svg"&gt;&amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;
        version=&amp;quot;1.1&amp;quot;
        viewBox=&amp;quot;0 0 24 24&amp;quot;&amp;gt;
    &amp;lt;text x=&amp;quot;0&amp;quot; y=&amp;quot;19&amp;quot;&amp;gt;&amp;amp;#x23ce;&amp;lt;/text&amp;gt;
&amp;lt;/svg&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first two lines are mandatory and describe to a browser that it works with
an SVG image file.&lt;/p&gt;
&lt;p&gt;The third line (&lt;code&gt;viewBox=&lt;/code&gt;) is really important since it allows the SVG image
to be scaleable, basically it says that the dimensions of the image are 25 by
25 units (the units are abstract, but you may think of them as pixels if it
makes it easier).&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; element puts a text box with just a single Unicode
character for the return symbol (&amp;#x23ce;), since I think it is quite an
adequate symbol to represent a line wrap point.&lt;/p&gt;
&lt;p&gt;There are different ways how you can incorporate an SVG image into CSS rule,
but since the content of the SVG file is so small and I did not want to host it
externally (it would be an additional fetch request and more maintenance), I
just did the following:&lt;/p&gt;
&lt;pre class="highlight" data-user="user"&gt;&lt;code class="language-shell"&gt;[user@localhost ~]$ cat nl.svg 
&amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;
        version=&amp;quot;1.1&amp;quot;
        viewBox=&amp;quot;0 0 24 24&amp;quot;&amp;gt;
    &amp;lt;text x=&amp;quot;0&amp;quot; y=&amp;quot;19&amp;quot;&amp;gt;&amp;amp;#x23ce;&amp;lt;/text&amp;gt;
&amp;lt;/svg&amp;gt;
[user@localhost ~]$ sed -n '1{h;d};$!H;${H;x;s,\s\+, ,g;s,&amp;gt;\s*&amp;lt;,&amp;gt;&amp;lt;,g;p}' nl.svg | base64 -w 0 ; echo
PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDI0IDI0Ij48dGV4dCB4PSIwIiB5PSIxOSI+JiN4MjNjZTs8L3RleHQ+PC9zdmc+Cg==&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In other words, I removed all the white space, then deleted all line breaks, so
I got a single line SVG body, and I converted it to Base64.  The resulting line
is usable as the inline definition of an image.  Let&amp;rsquo;s update our stylesheet
with the new values (we just replaced the last line to change the &lt;code&gt;background&lt;/code&gt;
to &lt;code&gt;background-image&lt;/code&gt;) and added dimensions for the background itself:&lt;/p&gt;
&lt;pre id="demo4" class="highlight line-numbers"&gt;&lt;code class="language-css"&gt;pre div.line {
    position: relative; /* so we could position the child */
    min-height: 1em;    /* to avoid collapsing empty lines */
}

pre div.line::after {
    content: '';        /* we need content for pseudo elements */
    position: absolute;
    display: block;
    width: 1em;     /* without width it will be invisible */
    height: 100%;       /* to match the height of the parent */
    top: 0;
    right: -1em;
    background-image:
        url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDI0IDI0Ij48dGV4dCB4PSIwIiB5PSIxOSI+JiN4MjNjZTs8L3RleHQ+PC9zdmc+Cg==)
        no-repeat repeat;
    background-size: 1em 1em;
}&lt;/code&gt;&lt;/pre&gt;

&lt;div class="demo4 resizable"&gt;
    &lt;style&gt;
        div.demo4 pre div.line {
            position: relative;
            min-height: 1em;
        }

        div.demo4 pre div.line::after {
            content: '';
            position: absolute;
            display: block;
            width: 1em;
            height: 100%;
            top: 0;
            right: -1em;
            background:
                url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDI0IDI0Ij48dGV4dCB4PSIwIiB5PSIxOSI+JiN4MjNjZTs8L3RleHQ+PC9zdmc+Cg==)
                no-repeat repeat;
            background-size: 1em 1em;
        }
    &lt;/style&gt;
&lt;pre&gt;&lt;div class="line"&gt;This is an example of a basic &amp;lt;pre&amp;gt; container.  You should&lt;/div&gt;&lt;div class="line"&gt;be able to resize it by dragging the bottom right corner (but if you are&lt;/div&gt;&lt;div class="line"&gt;using anything than Chrome you may be out of luck with the resizing).&lt;/div&gt;&lt;div class="line"&gt;&lt;/div&gt;&lt;div class="line"&gt;This line was made specifically long to trigger the line wrapping, so even those who are using a browser that cannot resize should be able to play with it :)&lt;/div&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Look at that, it is almost shaping into what we want :).  However, something is
not right &amp;ndash; the alignment of the markers to the corresponding lines is nowhere
to be seen.  It is, like, they are of different sizes despite that the
&lt;code&gt;font-size&lt;/code&gt; property for both of them is the same.  Hmm.&lt;/p&gt;
&lt;p&gt;If we recall that &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model" title="Introduction to the CSS box model"&gt;CSS basic model document&lt;/a&gt; we will discover in the very last
paragraph that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a name="CSS_basic_model_line_height" href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model"&gt;&lt;/a&gt;
note that for non-replaced inline elements, the amount of space taken up (the
contribution to the height of the line) is determined by the line-height
property&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Is this our hint?  Let&amp;rsquo;s try to explicitly set the &lt;code&gt;line-height&lt;/code&gt; property for
our lines (reading documentation you may find that the default value is
&lt;code&gt;normal&lt;/code&gt; and you can also find that &lt;code&gt;normal&lt;/code&gt; equals &lt;code&gt;1.2&lt;/code&gt; for the majority of
browsers, but relying on that, I think is a bad idea).  We also need to adjust
our markers with the new information we have got:&lt;/p&gt;
&lt;pre id="demo5" class="highlight"&gt;&lt;code class="language-css"&gt;pre div.line {
    position: relative; /* so we could position the child */
    min-height: 1em;    /* to avoid collapsing empty lines */
    line-height: 1.2;   /* set the height explicitly */
}

pre div.line::after {
    content: '';        /* we need content for pseudo elements */
    position: absolute;
    display: block;
    width: 1.2em;       /* without width it will be invisible */
    height: 100%;       /* to match the height of the parent */
    top: 0;
    right: -1.2em;
    background-image:
        url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDI0IDI0Ij48dGV4dCB4PSIwIiB5PSIxOSI+JiN4MjNjZTs8L3RleHQ+PC9zdmc+Cg==)
        no-repeat repeat;
    background-size: 1.2em 1.2em;
}&lt;/code&gt;&lt;/pre&gt;

&lt;div class="demo5 resizable"&gt;
    &lt;style&gt;
        div.demo5 pre div.line {
            position: relative;
            min-height: 1em;
            line-height: 1.2;
        }

        div.demo5 pre div.line::after {
            content: '';
            position: absolute;
            display: block;
            width: 1.2em;
            height: 100%;
            top: 0;
            right: -1.2em;
            background:
                url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDI0IDI0Ij48dGV4dCB4PSIwIiB5PSIxOSI+JiN4MjNjZTs8L3RleHQ+PC9zdmc+Cg==)
                no-repeat repeat;
            background-size: 1.2em 1.2em;
        }
    &lt;/style&gt;
&lt;pre&gt;&lt;div class="line"&gt;This is an example of a basic &amp;lt;pre&amp;gt; container.  You should&lt;/div&gt;&lt;div class="line"&gt;be able to resize it by dragging the bottom right corner (but if you are&lt;/div&gt;&lt;div class="line"&gt;using anything than Chrome you may be out of luck with the resizing).&lt;/div&gt;&lt;div class="line"&gt;&lt;/div&gt;&lt;div class="line"&gt;This line was made specifically long to trigger the line wrapping, so even those who are using a browser that cannot resize should be able to play with it :)&lt;/div&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is an improvement, is not it?  So we just need some final touches to call
it done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As it stands, we are showing the marker for the last part of the wrapped line, but we should not;&lt;/li&gt;
&lt;li&gt;The colour of the marker is too bright and matches the text colour of the line wrapping of which we are highlighting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To address the latter a simple play with the &lt;code&gt;opacity&lt;/code&gt; attribute will suffice,
e.g. I think 50% transparency should make the marker less distracting.&lt;/p&gt;
&lt;p&gt;The former, however, requires some thinking.  Given that the post is already too long, I will just state that out of multiple options I had I chose the following: raise the background image by one &lt;code&gt;line-height&lt;/code&gt; from the bottom, and clip a square 1x1 &lt;code&gt;line-height&lt;/code&gt; at the top to compensate, as follows:&lt;/p&gt;
&lt;pre id="demo6" class="highlight"&gt;&lt;code class="language-css"&gt;pre div.line {
    position: relative; /* so we could position the child */
    min-height: 1em;    /* to avoid collapsing empty lines */
    line-height: 1.2;   /* set the height explicitly */
}

pre div.line::after {
    content: '';        /* we need content for pseudo elements */
    position: absolute;
    display: block;
    width: 1.2em;       /* without width it will be invisible */
    height: 100%;       /* to match the height of the parent */
    bottom: 0;
    right: -1.2em;
    background-image:
        url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDI0IDI0Ij48dGV4dCB4PSIwIiB5PSIxOSI+JiN4MjNjZTs8L3RleHQ+PC9zdmc+Cg==)
        no-repeat repeat;
    background-size: 1.2em 1.2em;
    margin-bottom: 0;
    clip: rect(1.2em 1.2em 100vh 0);
    opacity: .5;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only tricky part in the added lines is the &lt;code&gt;clip: rect(1.2em 1.2em 100vh
0)&lt;/code&gt; line.  The &lt;code&gt;clip&lt;/code&gt; property defines the visible rectangle the browser should
preserve, but there is a conundrum: the height of the wrapped line is variable,
so we cannot deterministically set this.  The trick here is that it is highly
unlikely (on the border of completely impossible :) ) that the visible height
of the wrapped line would be bigger that the height of the viewport the user is
looking through.&lt;/p&gt;
&lt;p&gt;Therefore, we are setting the height of the clipped area to the height of the
viewport (&lt;code&gt;100vh&lt;/code&gt;), but this will be a rare edge case to actually utilise this
&amp;ndash; in the majority of cases the height of the clipping rectangle will be
limited by the height of the block containing the wrapped line.  Basically,
this is exactly what we want :).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see the final result in action:&lt;/p&gt;
&lt;div class="demo6 resizable"&gt;
    &lt;style&gt;
        div.demo6 pre div.line {
            position: relative;
            min-height: 1em;
            line-height: 1.2;
        }

        div.demo6 pre div.line::after {
            content: '';
            position: absolute;
            display: block;
            width: 1.2em;
            height: 100%;
            bottom: 0;
            right: -1.2em;
            background:
                url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDI0IDI0Ij48dGV4dCB4PSIwIiB5PSIxOSI+JiN4MjNjZTs8L3RleHQ+PC9zdmc+Cg==)
                no-repeat repeat;
            background-size: 1.2em 1.2em;
            margin-bottom: 1.2em;
            clip: rect(1.2em 1.2em 100vh 0);
            opacity: .5;
        }
    &lt;/style&gt;
&lt;pre&gt;&lt;div class="line"&gt;This is an example of a basic &amp;lt;pre&amp;gt; container.  You should&lt;/div&gt;&lt;div class="line"&gt;be able to resize it by dragging the bottom right corner (but if you are&lt;/div&gt;&lt;div class="line"&gt;using anything than Chrome you may be out of luck with the resizing).&lt;/div&gt;&lt;div class="line"&gt;&lt;/div&gt;&lt;div class="line"&gt;This line was made specifically long to trigger the line wrapping, so even those who are using a browser that cannot resize should be able to play with it :)&lt;/div&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id="bonus-round"&gt;Bonus Round&lt;/h2&gt;
&lt;p&gt;It should be mentioned, it is also possible to apply the same approach to the
left side of the lines with a bit of a twist.&lt;/p&gt;
&lt;pre id="demo7" class="highlight"&gt;&lt;code class="language-css"&gt;pre div.line {
    position: relative; /* so we could position the child */
    min-height: 1em;    /* to avoid collapsing empty lines */
    line-height: 1.2;   /* set the height explicitly */
    text-indent: -1.2em;    /* first line indent */
    padding-left: 1.2em;    /* padding for the line */
}

pre div.line::before {
    content: '';        /* we need content for pseudo elements */
    position: absolute;
    display: block;
    width: 1.2em;       /* without width it will be invisible */
    height: 100%;       /* to match the height of the parent */
    top: 0;
    left: 0;
    background:
        url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDI0IDI0Ij48dGV4dCB4PSIwIiB5PSIxOSI+JiN4MjNjZTs8L3RleHQ+PC9zdmc+Cg==)
        no-repeat repeat;
    background-size: 1.2em 1.2em;
    clip: rect(1.2em 1.2em 100vh 0);
    opacity: .5;
    transform: rotateY(180deg); /* mirror the arrow */
    transform-origin: left;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The trick here is the play between &lt;code&gt;padding-left&lt;/code&gt; and &lt;code&gt;text-indent&lt;/code&gt; for the
&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element since &lt;code&gt;text-indent&lt;/code&gt; will be applied to the first line only
(effectively negating the padding set for the whole element), thus the rest of
wrapped line will be padded to make space for the marker, which we place as
usual with the clipping region to suppress it for the very first part of the
wrapped line.&lt;/p&gt;
&lt;p&gt;The result looks as follows (and I am actually torn which side I like better,
so, maybe, for my blog I may just go with the left-side solution):&lt;/p&gt;
&lt;div class="demo7 resizable"&gt;
    &lt;style&gt;
        div.demo7 pre div.line {
            position: relative;
            min-height: 1em;
            line-height: 1.2;
            text-indent: -1.2em;
            padding-left: 1.2em;
        }

        div.demo7 pre div.line::after {
            content: '';
            position: absolute;
            display: block;
            width: 1.2em;
            height: 100%;
            top: 0;
            left: 1em;
            background:
                url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDI0IDI0Ij48dGV4dCB4PSIwIiB5PSIxOSI+JiN4MjNjZTs8L3RleHQ+PC9zdmc+Cg==)
                no-repeat repeat;
            background-size: 1.2em 1.2em;
            clip: rect(1.2em 1.2em 100vh 0);
            opacity: .5;
            transform: rotateY(180deg);
            transform-origin: left;
        }
    &lt;/style&gt;
&lt;pre&gt;&lt;div class="line"&gt;This is an example of a basic &amp;lt;pre&amp;gt; container.  You should&lt;/div&gt;&lt;div class="line"&gt;be able to resize it by dragging the bottom right corner (but if you are&lt;/div&gt;&lt;div class="line"&gt;using anything than Chrome you may be out of luck with the resizing).&lt;/div&gt;&lt;div class="line"&gt;&lt;/div&gt;&lt;div class="line"&gt;This line was made specifically long to trigger the line wrapping, so even those who are using a browser that cannot resize should be able to play with it :)&lt;/div&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This idea for the &lt;code&gt;padding-left&lt;/code&gt; and &lt;code&gt;text-indent&lt;/code&gt; trick came from &lt;a href="http://shaunwagner.com/"&gt;C. Shaun
&amp;ldquo;Kainaw&amp;rdquo; Wagner&lt;/a&gt; when &lt;a href="https://stackoverflow.com/a/48936538/3316011"&gt;he answered a question about
the wrap indicators&lt;/a&gt; on Stack
Overflow (I am sure that it was known before, but this is where I learnt it).&lt;/p&gt;
&lt;h2 id="assessment-of-the-result"&gt;Assessment of the result&lt;/h2&gt;
&lt;p&gt;We started with the following requirement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;these code blocks may have continuous white space that we want to preserve;&lt;/p&gt;
&lt;p&gt;Achieved: we did some changes to ensure that even empty lines are preseved.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;our page layout is flexible and there are no guarantees that the width of a
    particular viewport (a window through which a browser renders the visible
    part of the page) is enough to display the whole line of code&lt;/p&gt;
&lt;p&gt;Achieved: our blocks are flexible and if a line is too long it is wrapped
in an easy to understand way.  We proved it by ensuring that any block
can be dynamically resized.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we want to ensure that layout does not break when a very long code line is
    encountered, so we expect that line to be wrapped to the next line upon
    hitting width of the containing box;&lt;/p&gt;
&lt;p&gt;Achieved: ditto as the previous item.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we need to present the reader (a user who is consuming information) a
    visual indicator that the line was wrapped;&lt;/p&gt;
&lt;p&gt;Achieved: we got our dynamic markers showing when the line was wrapped.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we also want the syntax highlighter (such as PrismJS in my case) not to be
    affected by whatever we come up with.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Unknown: I think it would be the material for another post, but I do not
expect a lot of issues since we only replaced the newline characters and
preserved the rest of lines intact.i&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;It turned out, that it was quite a hassle since none of plugins PrismJS
have for working with lines expect semantic markup of the lines inside the
block.  Therefore, I spent some time and came up with a plugin that does it
&amp;ldquo;right&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;It is highly likely, that my plugin will get merged into the Prism tree
(see the corresponding &lt;a href="https://github.com/PrismJS/prism/pull/2389"&gt;Pull Request&lt;/a&gt;).  However, if for some reason it would
not be or you need the functionality &amp;ldquo;here &amp;amp; now&amp;rdquo;, you can always get it
from my &lt;a href="https://github.com/galaxy4public/prism/tree/plugin-lines"&gt;fork of PrismJS&lt;/a&gt; (I will keep the &lt;code&gt;plugin-lines&lt;/code&gt; branch until it
is merged upstream).&lt;/p&gt;
&lt;p&gt;By the way, my Lines plugin is the primary working horse for all syntax
highlighted blocks on this site (so you have already seen it in action).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope this helped you and you learnt something :).  If you have any
constructive feedback, I would appreciate it, specifically if you have ideas on
how to improve the presented solution.&lt;/p&gt;</content><category term="web design"></category><category term="html"></category><category term="css"></category><category term="design"></category></entry><entry><title>Migrating blog to Pelican</title><link href="https://dmitry.khlebnikov.net/2020/05/01/migrating-blog-to-pelican/" rel="alternate"></link><published>2020-05-01T20:00:00+10:00</published><updated>2020-05-17T20:25:15+10:00</updated><author><name>(GalaxyMaster)</name></author><id>tag:dmitry.khlebnikov.net,2020-05-01:/2020/05/01/migrating-blog-to-pelican/</id><summary type="html">&lt;p&gt;I had my blog site for more than a decade now, but until now I was not putting
any effort or thoughts into maintaining my audience or promoting the site.  It
was dormant for nearly a decade and I decided to rejuvenate it and start using
it as a platform I could leverage to share some ideas I think which are worth
sharing.&lt;/p&gt;
&lt;p&gt;Before I embarked on the journey of renovating the blog site I needed to set
some goals and requirements up, so I would be able to assess my progress and
estimate how much effort is required.  The &lt;span class="truncated"&gt;&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I had my blog site for more than a decade now, but until now I was not putting
any effort or thoughts into maintaining my audience or promoting the site.  It
was dormant for nearly a decade and I decided to rejuvenate it and start using
it as a platform I could leverage to share some ideas I think which are worth
sharing.&lt;/p&gt;
&lt;p&gt;Before I embarked on the journey of renovating the blog site I needed to set
some goals and requirements up, so I would be able to assess my progress and
estimate how much effort is required.  The primary goal is already known at
this point: I need a tool that would allow me to easily share my ideas, grow
and nurture the audience, and accumulate knowledge in one place over time.&lt;/p&gt;
&lt;p&gt;I started to be increasingly unhappy with the &lt;a href="https://blogger.com"&gt;Blogger&lt;/a&gt;) platform: they were
changing things and as the result parts of my blog became defunct, e.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in 2017, I lost the comment capability and did not have enough time to
    investigate and fix it,&lt;/li&gt;
&lt;li&gt;in 2018, my theme became incompatible with the new trends of the platform,&lt;/li&gt;
&lt;li&gt;and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, the first requirement became to self-host my blog site, so I would
have full control over the software that is supporting the site.  This would
give the flexibility and determinism of how the site is configured and operates.&lt;/p&gt;
&lt;p&gt;The downside for hosting the site myself is that it would require ongoing
maintenance cost (primarily calculated in the time I spend on the maintenance)
and with my quite busy schedule I was not sure that I could afford it on the
ongoing basis.  So the second requirement became the low maintenance cost of
the solution.  Preferably, I wanted to make changes only when I needed to
change site&amp;rsquo;s functionality.&lt;/p&gt;
&lt;p&gt;I did some research and figured that a static website generator could be a
solution that addressed both aforementioned requirements assuming that I could
find a place where all underlying maintenance of the infrastructure and
application layer handled by somebody else (and, preferably, free of charge).&lt;/p&gt;
&lt;p&gt;There are plenty of static site generators (&lt;abbr title="Static Site Generator"&gt;SSG&lt;/abbr&gt;).  According to some articles,
there are more than 400 different &lt;abbr title="Static Site Generator"&gt;SSG&lt;/abbr&gt; at the moment, so the process of
selecting one that is right for you could be quite challenging.  I decided to
define what I would like to see in the generator I could use and be happy about
it before I start shopping around:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;should be written in one of the scripting languages that are widely adopted&lt;/p&gt;
&lt;p&gt;This requirement comes from my desire of running that software on a
platform that is fully managed by somebody else (my initial thought was to
host the site in an &lt;abbr title="Amazon Web Services"&gt;AWS&lt;/abbr&gt; S3 bucket and generate the site using &lt;abbr title="Amazon Web Services"&gt;AWS&lt;/abbr&gt; Lambda
function)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;should be lean with minimum dependencies for the generator itself&lt;/p&gt;
&lt;p&gt;The more dependencies software has the more likely it is to get an
unexpected behaviour once one of the upstream dependencies make an
undesirable breaking change.  I really wanted stability and to touch the
configuration in rare occasions only when I needed to change the behaviour
of my site and not in an adhoc response to an upstream breaking change.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;should be extensible and should support a plug-in mechanism&lt;/p&gt;
&lt;p&gt;I have a really high bar on what the final result should be, e.g. valid and
standard compliant HTML and CSS documents, semantic structuring, etc.  In
order not to be limited by the generator I needed a way on how I could
influence the generation process without patching or tweaking the core of
the generator itself, since doing it this way would mean maintaining a fork
of the generator and as I mentioned above, it does not fit the second
requirement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the template language should be flexible and should allow conditional logic&lt;/p&gt;
&lt;p&gt;Over the years I worked with multiple template engines and I found that the
most comfortable engines are those that potentially allow you to break the
concept of separating design from code.  Not that I recommend doing so, but
having such power gives you yet another flexible interface to express
yourself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the architecture of the generator should feel clean, stable, and thought out&lt;/p&gt;
&lt;p&gt;I do not know how to easily describe this, but my understanding of the well
engineered software is when its layout is simple to understand, structured,
yet easily extendable without introducing any invasive changes to the
structure, e.g. callbacks/hooks in the key transition points, so you could
hook the external code up and influence the logic, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A bit more research brought me to the realisation that there is a trend in the
community and it has a name: &lt;a href="https://jamstack.org/"&gt;Javascript, API, and Markup Stack(Jamstack)&lt;/a&gt;.
The ideas behind Jamstack resonate with my vision on how I wanted to run my
blog, so if you want to understand the reasoning behind many choices I made
their website would be a good place to start reading about the approach.&lt;/p&gt;
&lt;p&gt;After a lot of consideration the following three &lt;span&gt;&lt;abbr title="Static Site Generator"&gt;SSG&lt;/abbr&gt;&lt;/span&gt;s were the primary
contenders to become the engine of my blog site:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://jekyllrb.com/"&gt;Jekill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gatsbyjs.org/"&gt;Gatsby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getpelican.com/"&gt;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of these three were aligned to the requirements, however I have an
indescribable allergy to NodeJS ecosystem and I prefer Python over Ruby, hence
Pelican was the first generator to spike with and to see whether we are a match
or not.&lt;/p&gt;
&lt;p&gt;The more I worked with Pelican the more I was falling in love with the
software: with less than 600K of source code spread across just 15 files (with
a couple being redundant in my configuration) it is packed with features and is
very extensible through a plug-in system.&lt;/p&gt;
&lt;p&gt;The next step was to create the templates (the collection of templates used to
generate the output is called a theme in Pelican).  While I was spiking I found
a theme I somewhat liked (&lt;a href="https://brutalistpelican.com/"&gt;Brutalist&lt;/a&gt; by Matt
McManus), then I found a free theme that I liked a lot
(&lt;a href="https://html5up.net/striped"&gt;Striped&lt;/a&gt; by AJ), but that theme was just an
HTML/CSS/JavaScript concept which was unrelated to Pelican in any way.&lt;/p&gt;
&lt;p&gt;Initially, I started to port the Striped theme to Pelican using the Brutalist
theme as the wireframe, but in the middle of that work I realised that despite
the Striped theme was posed as &amp;ldquo;&lt;q cite="https://html5up.net/striped"&gt;a free, fully responsive HTML5 site
template&lt;/q&gt;&amp;rdquo; it was generated in a haste and was not that responsive as the
claim would make you think.  There were lots of inconsistencies and no
overarching conventions on how things were structured within.&lt;/p&gt;
&lt;p&gt;After a while, struggling to fix everything I was not happy with in Striped
theme&amp;rsquo;s code, I decided to take a different approach: I decided to re-create
Striped-like Pelican theme from scratch using Pelican&amp;rsquo;s default theme called
&amp;ldquo;simple&amp;rdquo; as the foundation.&lt;/p&gt;
&lt;p&gt;The result (which is still an ongoing process) as you can see has some
resemblance to the theme I was taking inspiration from, but on the other hand
it is quite different and standalone in its own right.  Up until some point I
was even retaining &amp;ldquo;Design by HTML5 UP&amp;rdquo; at the bottom of the left hand side
menu, but when I realised that almost nothing left of the original design and
layout, I removed it, the theme evolved much further that the inspirational
theme I started with.&lt;/p&gt;
&lt;p&gt;This post is already getting too long, so I will conclude with the following:
I am going to publish a series of posts covering the development of this
website, the tips and tricks I learnt over the course of creating it, and the
infrastructure supporting the site and its deployment process in detail.&lt;/p&gt;
&lt;p&gt;All blog posts related to these topics will be tagged with the &amp;ldquo;&lt;a href="/tag/blog/"&gt;blog&lt;/a&gt;&amp;rdquo; tag, so
you should be able to find them easily (or even subscribe to the &lt;a href="/feeds/blog.atom.xml"&gt;blog RSS feed&lt;/a&gt;
(you may need to copy the link into your RSS Reader) to get the latest updates
as soon as I publish them).&lt;/p&gt;</content><category term="blog"></category><category term="pelican"></category><category term="blog"></category></entry><entry><title>nginx + a backend with a dynamic IP (e.g. AWS ELB)</title><link href="https://dmitry.khlebnikov.net/2017/01/13/nginx-a-backend-with-a-dynamic-ip-eg-aws-elb/" rel="alternate"></link><published>2017-01-13T10:00:00+11:00</published><updated>2020-05-17T20:25:15+10:00</updated><author><name>(GalaxyMaster)</name></author><id>tag:dmitry.khlebnikov.net,2017-01-13:/2017/01/13/nginx-a-backend-with-a-dynamic-ip-eg-aws-elb/</id><summary type="html">&lt;p&gt;Recently, I wrote about &lt;a href="https://dmitry.khlebnikov.net/2016/09/20/dynamic-resolution-of-upstream-servers-in-nginx/"&gt;the dynamic resolution of upstream servers&lt;/a&gt; in
nginx which was achieved by quite an intrusive patch to the core nginx module.
The patch was invented a while ago and was working very well up until recent
nginx versions were released.&lt;/p&gt;
&lt;p&gt;With the release of nginx 1.10 it was noticed that the patch crashes some
workers under heavy load and this was unacceptable for the production load,
hence a new approach was implemented.&lt;/p&gt;
&lt;p&gt;The beauty of the new solution is that it is non-intrusive and works with any
services that communicate via sockets.&lt;/p&gt;
&lt;p&gt;In a nutshell &lt;span class="truncated"&gt;&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I wrote about &lt;a href="https://dmitry.khlebnikov.net/2016/09/20/dynamic-resolution-of-upstream-servers-in-nginx/"&gt;the dynamic resolution of upstream servers&lt;/a&gt; in
nginx which was achieved by quite an intrusive patch to the core nginx module.
The patch was invented a while ago and was working very well up until recent
nginx versions were released.&lt;/p&gt;
&lt;p&gt;With the release of nginx 1.10 it was noticed that the patch crashes some
workers under heavy load and this was unacceptable for the production load,
hence a new approach was implemented.&lt;/p&gt;
&lt;p&gt;The beauty of the new solution is that it is non-intrusive and works with any
services that communicate via sockets.&lt;/p&gt;
&lt;p&gt;In a nutshell, I just looked at the problem from a little bit different angle
after I defined the requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nginx needs to delegate the requests to a FastCGI server over a socket&lt;/li&gt;
&lt;li&gt;we want to work with the standard packages provided by the distribution&lt;/li&gt;
&lt;li&gt;the FastCGI server could be on a dynamic IP address&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since we are not allowed to patch the application the only place we can meddle
with the communication between nginx and the FastCGI server is the socket nginx
connects to. Therefore, we need some kind of a proxy that would take requests
from nginx, determine the FastCGI endpoint, and forward the requests to that
endpoint.&lt;/p&gt;
&lt;p&gt;Initially, I thought that I would use something like netcat or a similar tool
for this, but then I found that systemd provides &lt;code&gt;systemd-socket-proxyd&lt;/code&gt; binary
which fits the purpose perfectly and could be configured to be socket
activated.&lt;/p&gt;
&lt;p&gt;Before we dive into the implementation details of this solution, let&amp;rsquo;s describe
what we are going to do and how:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nginx will be configured to talk to the locally bound socket - there are
    two options, actually: either a local TCP socket or a Unix socket&lt;/li&gt;
&lt;li&gt;a proxy service will be socket activated by a request coming from nginx to
    that local socket&lt;/li&gt;
&lt;li&gt;a proxy service should resolve the target and forward the request there&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The nginx part is easy &amp;ndash; we just need to replace the FastCGI server endpoint
address (in our example below it was &lt;code&gt;remote.php.backend.domain.tld.:9000&lt;/code&gt;)
with our local socket (we are using a unix socket at
&lt;code&gt;/run/systemd-socket-proxyd/fastcgi.sock&lt;/code&gt; in this example):&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-nginx"&gt;upstream php {
    #server remote.php.backend.domain.tld.:9000;
    server  unix:/run/systemd-socket-proxyd/fastcgi.sock;
}
location ~ \.php$ {
    try_files   $uri = 404;
    fastcgi_pass    php;
    fastcgi_index   index.php;
    include     fastcgi.conf;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is to define the socket activated proxy service. This generally
requires creating two files in &lt;code&gt;/etc/system/systemd&lt;/code&gt; directory: one for the
socket and the other for the proxy itself. However, in this article we will go
an extra mile and will define template units so the same configuration could be
reused to launch multiple proxies using the same base templates.&lt;/p&gt;
&lt;p&gt;The first template file is for the systemd service which will provide the proxy
capability:&lt;/p&gt;
&lt;pre class="highlight" data-file="/etc/systemd/system/systemd-socket-proxyd@.service"&gt;&lt;code class="language-systemd"&gt;[Unit]
Description=&amp;quot;Generic Socket Proxy (%I)&amp;quot;
Documentation=https://www.freedesktop.org/software/systemd/man/systemd-socket-proxyd.html
After=network.service

[Service]
EnvironmentFile=-/etc/sysconfig/systemd-socket-proxyd.%i
User=nobody
Group=nobody
OOMScoreAdjust=-1000
UMask=077
ExecStart=/usr/lib/systemd/systemd-socket-proxyd $TARGET
Restart=on-failure
PrivateTmp=true
PrivateDevices=true
#PrivateUsers=true
#ProtectSystem=strict
ProtectSystem=full
#ProtectKernelTunables=true
#ProtectControlGroups=true
#NoNewPrivileges=true
#ProtectKernelModules=true
#MemoryDenyWriteExecute=true&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending on the version of your &lt;code&gt;systemd&lt;/code&gt; manager you may be able to uncomment
more lines than was shown in this example, which was tested on CentOS 7.3.1611.&lt;/p&gt;
&lt;p&gt;Also, in the example template given above we are using &lt;code&gt;OOMScoreAdjust=-1000&lt;/code&gt; to
protect this proxy service from being killed in the event the system is
starving for memory &amp;ndash; this may be something you do not need.&lt;/p&gt;
&lt;p&gt;The second template file is for the socket unit that would trigger the
activation of the proxy service when a request arrives on the socket:&lt;/p&gt;
&lt;pre class="highlight" data-file="/etc/systemd/system/systemd-socket-proxyd@.socket"&gt;&lt;code class="language-systemd"&gt;[Unit]
Description=&amp;quot;Socket for Generic Socket Proxy (%I)&amp;quot;
Documentation=https://www.freedesktop.org/software/systemd/man/systemd-socket-proxyd.html

[Socket]
ListenStream=/run/systemd-socket-proxyd/%i.sock
SocketUser=root
SocketGroup=root
SocketMode=0660
DirectoryMode=0711

[Install]
WantedBy=sockets.target&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may notice that the defaults are pretty strict:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the socket is owned by root and only root is allowed to work with the
    socket;&lt;/li&gt;
&lt;li&gt;the directory permissions are set in such a way that the
    &lt;code&gt;/run/systemd-socket-proxyd&lt;/code&gt; directory file list is not readable by anyone
    except root.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are safe and sane defaults and can be tweaked per instance that was
instantiated using the template as shown later in this article.&lt;/p&gt;
&lt;p&gt;Since our goal is to connect nginx to the backend FastCGI service we need to
ensure that the proxy socket is read/write accessible to nginx&amp;rsquo;es workers, so
we need to tweak the settings of the socket unit:&lt;/p&gt;
&lt;pre class="highlight" data-file="/etc/systemd/system/systemd-socket-proxyd@fastcgi.socket.d/fastcgi.conf"&gt;&lt;code class="language-systemd"&gt;[Socket]
SocketGroup=nginx&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how we extended the template for a specific named instance of the socket
unit: we defined the &lt;code&gt;systemd-socket-proxyd@fastcgi.socket.d&lt;/code&gt; sub-directory and
put a drop-in configuration snippet there.&lt;/p&gt;
&lt;p&gt;Now, to achieve our goal we need to specify the target endpoint for our proxy
service (the named instance we spawn using the template):&lt;/p&gt;
&lt;pre class="highlight" data-file="/etc/systemd/system/systemd-socket-proxyd@fastcgi.service.d/fastcgi.conf"&gt;&lt;code class="language-systemd"&gt;[Service]
# Reset the ExecStart, so we could override it
ExecStart=
ExecStart=/usr/lib/systemd/systemd-socket-proxyd remote.php.backend.domain.tld.:9000&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The mechanics behind extending the configuration is the same as for the socket
unit, but here we overrode the &lt;code&gt;ExecStart&lt;/code&gt; command to specify the target endpoint
for the proxy.&lt;/p&gt;
&lt;p&gt;OK, we are done with the configuration of &lt;code&gt;systemd&lt;/code&gt;, so it would be a good time
to reload the &lt;code&gt;systemd&lt;/code&gt; daemon:&lt;/p&gt;
&lt;pre class="highlight" data-user="root"&gt;&lt;code class="language-shell"&gt;[root@localhost ~]# systemctl daemon-reload&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run a system where SELinux is disabled (why?!) you don&amp;rsquo;t need to do
anything additional and should be good, but if you are security conscious and
want to ensure that you follow the least privilege principle, then read on :)&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;code&gt;systemd-socket-proxyd&lt;/code&gt; seems not to be used a lot by the
community (most likely people are just unaware of it) so the tool has no
dedicated policy attached to it in the targeted SELinux policy. I plan to push
the change into the SELinux reference policy, but before I do we are going to
use a custom loadable policy module.&lt;/p&gt;
&lt;p&gt;To build a module you need the SELinux reference policy development framework
installed on the instance you are building your policies (it can be the same
instance you are running your proxy on, but I would advise to use a temporary
VM for building/compiling policies since the only time you need that
development stuff is when you are compiling the module from sources).&lt;/p&gt;
&lt;p&gt;On CentOS, you can install all the necessary bits to build a loadable SELinux
module by installing the &lt;code&gt;selinux-policy-devel&lt;/code&gt; package using &lt;code&gt;yum&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight" data-user="root"&gt;&lt;code class="language-shell"&gt;[root@localhost ~]# yum -y install selinux-policy-devel&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note, I skipped the output of the command since it does not provide any useful
information for the purposes of this article.&lt;/p&gt;
&lt;p&gt;Once the SELinux development framework is installed we can start designing our
loadable policy for the &lt;code&gt;systemd-socket-proxyd&lt;/code&gt; service.&lt;/p&gt;
&lt;p&gt;Our policy will consist of two files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;systemd-socket-proxyd.te&lt;/code&gt; &amp;ndash; the type enforcement ruleset; and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;systemd-socket-proxyd.fc&lt;/code&gt; &amp;ndash; the file context ruleset.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eventually, we will need to introduce the corresponding module interface
support file too, but for the purposes of this article we should be fine with
the automatically generated one.&lt;/p&gt;
&lt;p&gt;The content of the systemd-socket-proxy.te file is listed below:&lt;/p&gt;
&lt;pre class="highlight" data-file="systemd-socket-proxy.te"&gt;&lt;code class="language-selinux"&gt;policy_module(systemd-socket-proxyd, 1.0)

## &amp;lt;desc&amp;gt;
##  &amp;lt;p&amp;gt;
##  Allow systemd-socket-proxyd to bind any port instead of one labelled
## with systemd_socket_proxyd_port_t.
##  &amp;lt;/p&amp;gt;
## &amp;lt;/desc&amp;gt;
gen_tunable(systemd_socket_proxyd_bind_any, false)

## &amp;lt;desc&amp;gt;
## &amp;lt;p&amp;gt;
## Allow systemd-socket-proxyd to connect to any port instead of
## labelled ones.
## &amp;lt;/p&amp;gt;
## &amp;lt;/desc&amp;gt;
gen_tunable(systemd_socket_proxyd_connect_any, false)

systemd_domain_template(systemd_socket_proxyd)

type systemd_socket_proxyd_unit_file_t;
systemd_unit_file(systemd_socket_proxyd_unit_file_t)

sysnet_dns_name_resolve(systemd_socket_proxyd_t)

# resolver
allow systemd_socket_proxyd_t self:unix_dgram_socket { create getopt setopt sendto read write };

# listener
type systemd_socket_proxyd_port_t;
corenet_port(systemd_socket_proxyd_port_t);
allow systemd_socket_proxyd_t self:tcp_socket accept;

tunable_policy(`!systemd_socket_proxyd_bind_any',`
 allow systemd_socket_proxyd_t systemd_socket_proxyd_port_t:tcp_socket name_bind;
')

tunable_policy(`systemd_socket_proxyd_bind_any',`
 corenet_tcp_bind_all_ports(systemd_socket_proxyd_t)
')

# target
tunable_policy(`!systemd_socket_proxyd_connect_any',`
 allow systemd_socket_proxyd_t port_type:tcp_socket name_connect;
')

tunable_policy(`systemd_socket_proxyd_connect_any',`
 corenet_tcp_connect_all_ports(systemd_socket_proxyd_t)
')

# consumer
allow daemon systemd_socket_proxyd_t:unix_stream_socket connectto;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is still work in progress, but so far it works at least for my projects.
Note that there are two SELinux booleans defined which affect the behaviour of
the policy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;systemd_socket_proxyd_bind_any&lt;/p&gt;
&lt;p&gt;allows to bind proxy to any TCP socket if set to true, otherwise the proxy
would be able to connect to TCP ports labelled with
&lt;code&gt;systemd_socket_proxyd_port_t&lt;/code&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;systemd_socket_proxyd_connect_any&lt;/p&gt;
&lt;p&gt;allows proxy to connect to any target TCP ports if set to true, otherwise
the target is limited by the ports labelled with
&lt;code&gt;systemd_socket_proxyd_port_t&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, to allow the proper transition into the &lt;code&gt;systemd_socket_proxyd_t&lt;/code&gt; domain we
need to label the &lt;code&gt;systemd-socket-proxyd&lt;/code&gt; binary with the
&lt;code&gt;systemd_socket_proxyd_exec_t&lt;/code&gt; label.&lt;/p&gt;
&lt;p&gt;The content of the systemd-socket-proxy.fc file that implements this behavior
is as follows:&lt;/p&gt;
&lt;pre class="highlight" data-file="systemd-socket-proxy.fc"&gt;&lt;code class="language-selinux"&gt;/(usr/lib|etc)/systemd/system/systemd-socket-proxyd\.service  gen_context(system_u:object_r:systemd_socket_proxyd_unit_file_t,s0)
/usr/lib/systemd/systemd-socket-proxyd -- gen_context(system_u:object_r:systemd_socket_proxyd_exec_t,s0)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, we have everything we need to compile a policy module, so let&amp;rsquo;s
just do it now:&lt;/p&gt;
&lt;pre class="highlight" data-user="root"&gt;&lt;code class="language-shell"&gt;[root@localhost ~]# ls -l
total 8
-rw-r--r--. 1 root root  235 Jan  5 05:21 systemd-socket-proxyd.fc
-rw-r--r--. 1 root root 1467 Jan  6 00:10 systemd-socket-proxyd.te
[root@localhost ~]# make -f /usr/share/selinux/devel/Makefile
Compiling targeted systemd-socket-proxyd module
/usr/bin/checkmodule:  loading policy configuration from tmp/systemd-socket-proxyd.tmp
/usr/bin/checkmodule:  policy configuration loaded
/usr/bin/checkmodule:  writing binary representation (version 17) to tmp/systemd-socket-proxyd.mod
Creating targeted systemd-socket-proxyd.pp policy package
rm tmp/systemd-socket-proxyd.mod tmp/systemd-socket-proxyd.mod.fc
[root@localhost ~]# semodule -i systemd-socket-proxyd.pp
[root@localhost ~]# restorecon -v /usr/lib/systemd/systemd-socket-proxyd
restorecon reset /usr/lib/systemd/systemd-socket-proxyd context system_u:object_r:init_exec_t:s0-&amp;gt;system_u:object_r:systemd_socket_proxyd_exec_t:s0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;semodule -i systemd-socket-proxyd.pp&lt;/code&gt; command has actually installed the
module into the system, but if you were building the module on a different
instance, then instead of installing the module you just need to grab the
resulting &lt;code&gt;systemd-socket-proxyd.pp&lt;/code&gt; file and transfer it to the target instance
where proxy is going to be running and only apply the last two commands
(&lt;code&gt;semodule -i ...&lt;/code&gt; and &lt;code&gt;restorecon&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We approached the time when we need to perform the pre-flight checks before
launching our new service :). First, we need to check whether the file context
was applied to the &lt;code&gt;systemd-socket-proxyd binary&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight" data-user="root"&gt;&lt;code class="language-shell"&gt;[root@localhost ~]# ls -ldZ /usr/lib/systemd/systemd-socket-proxyd 
-rwxr-xr-x. root root system_u:object_r:systemd_socket_proxyd_exec_t:s0 /usr/lib/systemd/systemd-socket-proxyd&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks good! Let&amp;rsquo;s start the socket unit and check the permissions set on the
socket file:&lt;/p&gt;
&lt;pre class="highlight" data-user="root"&gt;&lt;code class="language-shell"&gt;[root@localhost ~]# systemctl start systemd-socket-proxyd@fastcgi.socket
[root@localhost ~]# ls -ldZ /run/systemd-socket-proxyd{,/fastcgi.sock}
drwx--x--x. root root  system_u:object_r:var_run_t:s0   /run/systemd-socket-proxyd
srw-rw----. root nginx system_u:object_r:var_run_t:s0   /run/systemd-socket-proxyd/fastcgi.sock&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This also looks as expected. The next test would be to check that our proxy
service is running with the desired set of permissions and in the correct
SELinux domain:&lt;/p&gt;
&lt;pre class="highlight" data-user="root"&gt;&lt;code class="language-shell"&gt;[root@localhost ~]# socat -v unix-client:/run/systemd-socket-proxyd/fastcgi.sock stdin

&amp;lt; 2017/01/13 00:59:22.987083  length=1 from=0 to=0

[root@localhost ~]# ps uZ -C systemd-socket-proxyd
LABEL                           USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
system_u:system_r:systemd_socket_proxyd_t:s0 nobody 28643 0.0  0.0 86628 756 ? Ssl  00:59   0:00 /usr/lib/systemd/systemd-socket-proxyd 127.0.0.1:9000
[root@localhost ~]# cat /proc/28643/status 
Name: systemd-socket-
State: S (sleeping)
Tgid: 28643
Ngid: 0
Pid: 28643
PPid: 1
TracerPid: 0
Uid: 99 99 99 99
Gid: 99 99 99 99
FDSize: 64
Groups: 99 
[truncated]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first &lt;code&gt;socat&lt;/code&gt; command was needed to trigger the socket activation that
resulted in the &lt;code&gt;systemd-socket-proxyd.service&lt;/code&gt; being launched.&lt;/p&gt;
&lt;p&gt;The second command confirmed that the service is running under the nobody user
and within the &lt;code&gt;systemd_socket_proxyd_t&lt;/code&gt; domain.&lt;/p&gt;
&lt;p&gt;Finally, the third command confirmed that the privileges were properly dropped
and there is no way the service could regain the escalated privileges back.&lt;/p&gt;
&lt;p&gt;Looks like we are all, so let&amp;rsquo;s make our changes persistent. To achieve this we
just need to enable the &lt;code&gt;systemd-socket-proxyd@fastcgi.socket&lt;/code&gt; unit:&lt;/p&gt;
&lt;pre class="highlight" data-user="root"&gt;&lt;code class="language-shell"&gt;[root@localhost ~]# systemctl enable systemd-socket-proxyd@fastcgi.socket
Created symlink from /etc/systemd/system/sockets.target.wants/systemd-socket-proxyd@fastcgi.socket to /etc/systemd/system/systemd-socket-proxyd@.socket.
[root@localhost ~]# systemctl status systemd-socket-proxyd@fastcgi.socket | fgrep Loaded:
   Loaded: loaded (/etc/systemd/system/systemd-socket-proxyd@.socket; enabled; vendor preset: disabled)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just to show that the configuration is working I set a simple lab up in a VM
and followed this article with the only exception of the PHP/FPM location which
I am running on the same VM:&lt;/p&gt;
&lt;pre class="highlight" data-user="root"&gt;&lt;code class="language-shell"&gt;[root@localhost ~]# cat /usr/share/nginx/html/test.php
&amp;lt;?php echo &amp;quot;This is the output from PHP\n&amp;quot; ?&amp;gt;
[root@localhost ~]# cat /etc/nginx/conf.d/php-upstream.conf 
upstream php {
    #server        remote.php.backend.domain.tld.:9000
    server         unix:/run/systemd-socket-proxyd/fastcgi.sock;
}
[root@localhost ~]# cat /etc/nginx/default.d/php.conf
location ~ \.php$ {
    try_files      $uri = 404;
    fastcgi_pass   php;
    fastcgi_index  index.php;
    include        fastcgi.conf;
}
[root@localhost ~]# cat /etc/systemd/system/systemd-socket-proxyd@fastcgi.service.d/fastcgi.conf
[Service]
# Reset the ExecStart, so we could override it
ExecStart=
ExecStart=/usr/lib/systemd/systemd-socket-proxyd 127.0.0.1:9000
[root@localhost ~]# telnet 0 80
Trying 0.0.0.0...
Connected to 0.
Escape character is '^]'.
GET /test.php HTTP/1.0

HTTP/1.1 200 OK
Server: nginx/1.10.2
Date: Fri, 13 Jan 2017 03:01:16 GMT
Content-Type: text/html
Connection: close
X-Powered-By: PHP/5.4.16

This is the output from PHP
Connection closed by foreign host.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Works as expected :).&lt;/p&gt;
&lt;p&gt;There is one thing one needs to be aware of: when I started to work on this I
discovered that &lt;code&gt;systemd-socket-proxyd&lt;/code&gt; had a hard-coded limit for the number
of connections set to 256 (I &lt;a href="https://dmitry.khlebnikov.net/2016/09/20/dynamic-resolution-of-upstream-servers-in-nginx/"&gt;introduced the &lt;code&gt;-c&lt;/code&gt; parameter&lt;/a&gt; to
&lt;code&gt;systemd-socket-proxyd&lt;/code&gt;, so one could dynamically set the limit, however it
would take some time until this change is propagated to all major distros).&lt;/p&gt;
&lt;p&gt;Also, it is worth it to mention that the provided configuration is not
efficient if you are using a domain name for the target endpoint for the proxy,
so if this is the case I would advise to run a local DNS caching service (e.g.
&lt;code&gt;dnsmasq&lt;/code&gt;) so you would not spend time on the DNS queries.&lt;/p&gt;
&lt;p&gt;As always, I would appreciate any feedback you may have.&lt;/p&gt;</content><category term="hacking"></category><category term="nginx"></category><category term="patch"></category></entry><entry><title>Dynamic resolution of upstream servers in nginx</title><link href="https://dmitry.khlebnikov.net/2016/09/20/dynamic-resolution-of-upstream-servers-in-nginx/" rel="alternate"></link><published>2016-09-20T10:00:00+10:00</published><updated>2020-05-17T20:25:15+10:00</updated><author><name>(GalaxyMaster)</name></author><id>tag:dmitry.khlebnikov.net,2016-09-20:/2016/09/20/dynamic-resolution-of-upstream-servers-in-nginx/</id><summary type="html">&lt;p&gt;UPDATE: This approach was superseded by the &lt;a href="https://dmitry.khlebnikov.net/2017/01/13/nginx-a-backend-with-a-dynamic-ip-eg-aws-elb/"&gt;proxying through
systemd-socket-proxyd&lt;/a&gt; approach.&lt;/p&gt;
&lt;p&gt;Many of my clients are running application stacks consisting of nginx plus some
kind of scripting engine behind it (be it PHP, Ruby, or something else).&lt;/p&gt;
&lt;p&gt;The architecture I designed for this kind of workload involves at least two
load balancers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an external, frontend load balancer that serves the web requests from
    visitors; and&lt;/li&gt;
&lt;li&gt;an internal, backend load balancer that distributes load between the
    backends.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Everything looks great when you implement this using &amp;ldquo;in-house&amp;rdquo; infrastructure
where you control most of the networking aspects.&lt;/p&gt;
&lt;p&gt;However, the tendency is that most &lt;span class="truncated"&gt;&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;UPDATE: This approach was superseded by the &lt;a href="https://dmitry.khlebnikov.net/2017/01/13/nginx-a-backend-with-a-dynamic-ip-eg-aws-elb/"&gt;proxying through
systemd-socket-proxyd&lt;/a&gt; approach.&lt;/p&gt;
&lt;p&gt;Many of my clients are running application stacks consisting of nginx plus some
kind of scripting engine behind it (be it PHP, Ruby, or something else).&lt;/p&gt;
&lt;p&gt;The architecture I designed for this kind of workload involves at least two
load balancers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an external, frontend load balancer that serves the web requests from
    visitors; and&lt;/li&gt;
&lt;li&gt;an internal, backend load balancer that distributes load between the
    backends.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Everything looks great when you implement this using &amp;ldquo;in-house&amp;rdquo; infrastructure
where you control most of the networking aspects.&lt;/p&gt;
&lt;p&gt;However, the tendency is that most enterprises are moving to the cloud
providers and with that we lose some control.&lt;/p&gt;
&lt;p&gt;Specifically, often the cloud providers define their load-balancers as
auto-scaling entities that change their IP addresses depending on the
scale-in/out activity.&lt;/p&gt;
&lt;p&gt;Unfortunately, the community version of nginx does not know how to dynamically
resolve the specified upstream servers (such a functionality is available from
the nginx commercial subscription only), so I spent a couple of evenings to
implement the desired functionality as a &lt;a href="https://github.com/galaxy4public/nginx-upstream-resolve" title="A patch to introduce the dynamic resolution of the upstream servers"&gt;patch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/galaxy4public/nginx-upstream-resolve" title="A patch to introduce the dynamic resolution of the upstream servers"&gt;patch&lt;/a&gt; implements the dynamic DNS resolution of the specified upstream
servers in the upstream compatible way: we are re-using the very same &amp;ldquo;resolve&amp;rdquo;
keyword on the server line as the commercial version of nginx does ensuring
that if you ever decide to switch to the commercial subscription you would not
need to change your configs.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/galaxy4public/nginx-upstream-resolve" title="A patch to introduce the dynamic resolution of the upstream servers"&gt;patch&lt;/a&gt; was originally created for nginx 0.8.6 and was used in
production for the last couple of years. The work on the patch was sponsored by
&lt;a href="https://openwall.com.au"&gt;Openwall (Australia)&lt;/a&gt; and &lt;a href="https://withriley.com"&gt;Data Solutions
Group&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy! :)&lt;/p&gt;</content><category term="hacking"></category><category term="nginx"></category><category term="patch"></category></entry><entry><title>Transparent SSH host-jumping (Expert)</title><link href="https://dmitry.khlebnikov.net/2016/07/26/transparent-ssh-host-jumping-expert/" rel="alternate"></link><published>2016-07-26T10:00:00+10:00</published><updated>2020-05-17T04:45:11+10:00</updated><author><name>(GalaxyMaster)</name></author><id>tag:dmitry.khlebnikov.net,2016-07-26:/2016/07/26/transparent-ssh-host-jumping-expert/</id><summary type="html">&lt;p&gt;A while ago in the &lt;a href="https://dmitry.khlebnikov.net/2015/08/06/transparent-ssh-host-jumping-advanced/"&gt;Transparent SSH host-jumping (Advanced)&lt;/a&gt; post I
described a technique on how one could jump quite effortlessly through a chain
of intermediate hosts. However, there was a catch: the user names and ports
across the whole chain should be the same and there was no easy way to change
that.&lt;/p&gt;
&lt;p&gt;Given that I &lt;a href="https://dmitry.khlebnikov.net/2016/07/25/ssh-interactive-proxycommand/"&gt;recently&lt;/a&gt; paid quite a lot of attention to the ProxyCommand
directive I decided to look into the implementation of the helper script that
will allow one to tweak parameters for the hosts in the chain.&lt;/p&gt;
&lt;p&gt;You can read the &lt;a href="https://dmitry.khlebnikov.net/2015/08/06/transparent-ssh-host-jumping-advanced/"&gt;original&lt;/a&gt; post for the &lt;span class="truncated"&gt;&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A while ago in the &lt;a href="https://dmitry.khlebnikov.net/2015/08/06/transparent-ssh-host-jumping-advanced/"&gt;Transparent SSH host-jumping (Advanced)&lt;/a&gt; post I
described a technique on how one could jump quite effortlessly through a chain
of intermediate hosts. However, there was a catch: the user names and ports
across the whole chain should be the same and there was no easy way to change
that.&lt;/p&gt;
&lt;p&gt;Given that I &lt;a href="https://dmitry.khlebnikov.net/2016/07/25/ssh-interactive-proxycommand/"&gt;recently&lt;/a&gt; paid quite a lot of attention to the ProxyCommand
directive I decided to look into the implementation of the helper script that
will allow one to tweak parameters for the hosts in the chain.&lt;/p&gt;
&lt;p&gt;You can read the &lt;a href="https://dmitry.khlebnikov.net/2015/08/06/transparent-ssh-host-jumping-advanced/"&gt;original&lt;/a&gt; post for the details of how this host-jumping
technique works, here I am only going to provide the proxy script and the
corresponding ssh config parameter block to use the script.&lt;/p&gt;
&lt;p&gt;The goal was to support the following syntax:&lt;/p&gt;
&lt;pre class="highlight" data-user="user"&gt;&lt;code class="language-shell"&gt;[user@localhost ~]$ ssh default_user@userA^hostA/userB^hostB:port/hostC&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It was a little challenge to come up with the character for identifying the
user part for intermediate hosts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@&lt;/code&gt; - cannot be used since SSH parses the command line before providing the
    string to the ProxyCommand script&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; - cannot be used since SSH was thinking that I&amp;rsquo;m trying to do an
    expansion of the internal SSH variable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;, and &lt;code&gt;&amp;amp;&lt;/code&gt; - are all shell unfriendly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I decided on the &lt;code&gt;^&lt;/code&gt; character as a delimiter.&lt;/p&gt;
&lt;p&gt;In the proposed command above the &amp;ldquo;default_user&amp;rdquo; is the user name we ultimately
want to use for logging into the last host in the chain (it happens that this
user name will be used for any host in the chain where no alternative name is
provided).&lt;/p&gt;
&lt;p&gt;Each host in the chain could also be provided with the relevant port or, if the
port is omitted, it will use the global port configuration (usually 22/tcp but
can be changed with the &lt;code&gt;-p&lt;/code&gt; argument to ssh).  The script is a bit not optimised
(bash is really slow on string processing, but I decided to stick with pure
bash where it was possible):&lt;/p&gt;
&lt;pre class="highlight" data-file="~/bin/ssh-helper.sh"&gt;&lt;code class="language-bash"&gt;#!/bin/bash
set -eu -o pipefail
exec 10&amp;lt;&amp;amp;0 11&amp;gt;&amp;amp;1 0&amp;lt;&amp;amp;2 1&amp;gt;&amp;amp;2
DEFAULT_USER=&amp;quot;$1&amp;quot;
DEFAULT_PORT=&amp;quot;$3&amp;quot;
HOST_CHAIN=&amp;quot;$2&amp;quot;
HOST_NEXT=&amp;quot;${HOST_CHAIN%%/*}&amp;quot;
HOST_USER=&amp;quot;${HOST_NEXT%%^*}&amp;quot;
[ &amp;quot;$HOST_USER&amp;quot; == &amp;quot;$HOST_NEXT&amp;quot; ] &amp;amp;&amp;amp; HOST_USER=&amp;quot;$DEFAULT_USER&amp;quot; ||:
HOST_PORT=&amp;quot;${HOST_NEXT##*:}&amp;quot;
[ &amp;quot;$HOST_PORT&amp;quot; == &amp;quot;$HOST_NEXT&amp;quot; ] &amp;amp;&amp;amp; HOST_PORT=&amp;quot;$DEFAULT_PORT&amp;quot; ||:
TARGET_HOST=&amp;quot;${HOST_CHAIN##*/}&amp;quot;
TARGET_PORT=&amp;quot;${TARGET_HOST##*:}&amp;quot;
TARGET_HOST=&amp;quot;${TARGET_HOST%:*}&amp;quot;
[ &amp;quot;$TARGET_PORT&amp;quot; == &amp;quot;$TARGET_HOST&amp;quot; ] &amp;amp;&amp;amp; TARGET_PORT=&amp;quot;$DEFAULT_PORT&amp;quot; ||:
TARGET_HOST=&amp;quot;${TARGET_HOST#*^}&amp;quot;
HOST_NEXT=&amp;quot;${HOST_NEXT#*^}&amp;quot;
HOST_NEXT=&amp;quot;${HOST_NEXT%:*}&amp;quot;
HOST_CHAIN=&amp;quot;${HOST_CHAIN%/*}&amp;quot;
[ &amp;quot;$HOST_CHAIN&amp;quot; == &amp;quot;${HOST_CHAIN#*/}&amp;quot; ] &amp;amp;&amp;amp; HOST_CHAIN= || HOST_CHAIN=&amp;quot;${HOST_CHAIN#*/}&amp;quot;
HOST_CHAIN=&amp;quot;$HOST_NEXT${HOST_CHAIN:+/$HOST_CHAIN}&amp;quot;

if [ ! -d &amp;quot;$HOME/.ssh/.sessions&amp;quot; ]; then
    echo &amp;quot;Creating the sessions directory&amp;quot; &amp;gt;&amp;amp;2
    mkdir -m700 &amp;quot;$HOME/.ssh/.sessions&amp;quot;
fi

CONTROL_SOCKET=$(printf &amp;quot;$HOST_USER@HOST_CHAIN:$HOST_PORT\n&amp;quot; | shasum | cut -f1 -d' ')

exec 0&amp;lt;&amp;amp;10 1&amp;gt;&amp;amp;11
exec ssh \
    -o &amp;quot;ControlMaster auto&amp;quot; \
    -o &amp;quot;ControlPath ~/.ssh/.sessions/$CONTROL_SOCKET&amp;quot; \
    -o &amp;quot;ControlPersist 120s&amp;quot; \
    -l &amp;quot;$HOST_USER&amp;quot; \
    -p &amp;quot;$HOST_PORT&amp;quot; \
    &amp;quot;$HOST_CHAIN&amp;quot; \
    -W &amp;quot;$TARGET_HOST&amp;quot;:&amp;quot;$TARGET_PORT&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above is a proof of the concept and it &amp;ldquo;works for me&amp;rdquo; :). I am using it
every day when I need to access boxes behind a bastion host. Your mileage may
vary and you are free to create your own version of the script that would
perform better (I would be really glad if a version of such a script could be
shared with me).&lt;/p&gt;
&lt;p&gt;The corresponding configuration block in the ssh config file looks as follows:&lt;/p&gt;
&lt;pre class="highlight" data-file="~/.ssh/config"&gt;&lt;code class="language-ssh_config"&gt;Host */*
    # if you uncomment ControlPath you also need to uncomment ControlMaster
    #ControlMaster auto
    # For OpenSSH &amp;lt; 6.7 you may uncomment the following, but long chains will fail:
    #ControlPath   ~/.ssh/.sessions/%r@%h:%p
    # For OpenSSH &amp;gt;= 6.7 you should uncomment the following:
    #ControlPath   ~/.ssh/.sessions/%C
    ProxyCommand ~/bin/ssh-helper.sh %r %h %p&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, this is a bit messy since OpenSSH introduced the &lt;code&gt;%C&lt;/code&gt; macro in version 6.7
and without &lt;code&gt;%C&lt;/code&gt; the &lt;code&gt;ControlPath&lt;/code&gt; string gets too long for OpenSSH to create a
socket on the filesystem for long chains of hosts.&lt;/p&gt;</content><category term="ssh"></category><category term="console"></category><category term="ssh"></category><category term="howto"></category></entry><entry><title>SSH: Interactive ProxyCommand</title><link href="https://dmitry.khlebnikov.net/2016/07/25/ssh-interactive-proxycommand/" rel="alternate"></link><published>2016-07-25T10:00:00+10:00</published><updated>2020-05-17T04:45:11+10:00</updated><author><name>(GalaxyMaster)</name></author><id>tag:dmitry.khlebnikov.net,2016-07-25:/2016/07/25/ssh-interactive-proxycommand/</id><summary type="html">&lt;p&gt;I was involved in the creation of the &lt;a href="https://github.com/realestate-com-au/sshephalopod"&gt;sshephalopod&lt;/a&gt; project, which was an
attempt to build an enterprise level authentication framework for SSH
authentication using the SSH &lt;abbr title="Certificate Authority"&gt;CA&lt;/abbr&gt; feature.&lt;/p&gt;
&lt;p&gt;The project is based on a wrapper script that signs a user via a &lt;abbr title="Security Assertion Markup Language"&gt;SAML&lt;/abbr&gt; identity
provider and gets user&amp;rsquo;s public key signed for the further usage.&lt;/p&gt;
&lt;p&gt;In one of the discussions I pointed out that such a wrapper script is not good
for the end user experience and I proposed to provide the users with an excerpt
for their ssh config file, so the functionality of sshephalopod would be &lt;span class="truncated"&gt;&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was involved in the creation of the &lt;a href="https://github.com/realestate-com-au/sshephalopod"&gt;sshephalopod&lt;/a&gt; project, which was an
attempt to build an enterprise level authentication framework for SSH
authentication using the SSH &lt;abbr title="Certificate Authority"&gt;CA&lt;/abbr&gt; feature.&lt;/p&gt;
&lt;p&gt;The project is based on a wrapper script that signs a user via a &lt;abbr title="Security Assertion Markup Language"&gt;SAML&lt;/abbr&gt; identity
provider and gets user&amp;rsquo;s public key signed for the further usage.&lt;/p&gt;
&lt;p&gt;In one of the discussions I pointed out that such a wrapper script is not good
for the end user experience and I proposed to provide the users with an excerpt
for their ssh config file, so the functionality of sshephalopod would be
transparent to the general usage scenario of the ssh tool.&lt;/p&gt;
&lt;p&gt;The response was that ProxyCommand do not support interactivity. Well, as they
say: The challenge is accepted :)&lt;/p&gt;
&lt;p&gt;The following is my train of thoughts before I came up with a general solution
on how to allow an interactive command to be used as the ProxyCommand in the
ssh config file.&lt;/p&gt;
&lt;p&gt;Before we start solving the problem at hand we need to create a test
environment, so we would be able to confirm when we reached success. The task
itself was very simple: we needed a host we could ssh into (an sshd daemon
running on the local host would be sufficient), then we needed an interactive
script, and a configuration block for the connection.&lt;/p&gt;
&lt;p&gt;The configuration block is pretty simple (%h expands to localhost and %p
expands to the port specified on the command line or to &amp;ldquo;22&amp;rdquo; otherwise):&lt;/p&gt;
&lt;pre class="highlight" data-user="user"&gt;&lt;code class="language-shell"&gt;[user@localhost ~]$ fgrep -A1 'Host localhost' ~/.ssh/config
Host localhost
 ProxyCommand ~/bin/interactive.script.sh %h %p&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since most of our research is going to be inside the interactive script you
will see several incarnations of script&amp;rsquo;s body. The very first one was the
following:&lt;/p&gt;
&lt;pre class="highlight" data-file="~/bin/interactive.script.sh"&gt;&lt;code class="language-bash"&gt;#!/bin/bash
exec nc &amp;quot;$1&amp;quot; &amp;quot;$2&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point we just need to confirm that our test environment works as
expected &amp;ndash; the ssh session should be proxied through the nc command and we
should be able to login under our own account via ssh to the localhost (my
private key was added to the key manager with ssh-add, hence no password prompt
was displayed):&lt;/p&gt;
&lt;pre class="highlight" data-user="user"&gt;&lt;code class="language-shell"&gt;[user@localhost ~]$ ssh galaxy@localhost
Last login: Thu Jul 21 01:30:21 2016
$&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, we confirmed that we can establish a proxied connection and tunnel our ssh
session through it.&lt;/p&gt;
&lt;p&gt;Each interactive script or program relies on the communication channel with the
user otherwise it could not be interactive. This channel comprises at least of
two file descriptors: one for standard input and the other for standard output,
so let&amp;rsquo;s check what descriptors are available for our script:&lt;/p&gt;
&lt;pre class="highlight" data="file="~/bin/interactive.script.sh""&gt;&lt;code class="language-bash"&gt;#!/bin/bash
# on Linux the following line would be much simpler: ls -l /proc/$$/fd/, but
# on OS X they do not expose the open file descriptors through /proc, so I
# used &amp;quot;lsof&amp;quot; instead.
lsof -p $$ &amp;gt;&amp;amp;2
exec nc &amp;quot;$1&amp;quot; &amp;quot;$2&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we try to connect now we should see something like the following (I am
writing this article on an OS X machine so I provide the output from OS X,
however this also works for Linux):&lt;/p&gt;
&lt;pre class="highlight" data-user="user"&gt;&lt;code class="language-shell"&gt;[user@localhost ~]$ ssh galaxy@localhost
COMMAND   PID   USER   FD   TYPE             DEVICE  SIZE/OFF     NODE NAME
bash    45225   user  cwd    DIR                1,2       612   893854 /Users/user/.ssh
bash    45225   user  txt    REG                1,2    628640  2329236 /bin/bash
bash    45225   user  txt    REG                1,2    625712 13892061 /usr/lib/dyld
bash    45225   user  txt    REG                1,2 385393734 13894121 /private/var/run/dyld_shared_cache_x86_64
bash    45225   user    0   PIPE 0x44d71099589485df     16384          -&amp;gt;0x44d7109951223d0f
bash    45225   user    1   PIPE 0x44d710995122454f     16384          -&amp;gt;0x44d71099512246af
bash    45225   user    2u   CHR               16,1  0t631830     9705 /dev/ttys001
bash    45225   user  255r   REG                1,2       219 15455259 /Users/user/bin/interactive.script.sh
Last login: Mon Jul 25 17:52:40 2016 from localhost
$&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are interested in file descriptors 0 (standard input), 1 (standard output),
and 2 (standard error). As you can see the standard input and output are part
of the pipes (presumably linking them to the parent ssh process) and standard
error is pointing to our terminal session.&lt;/p&gt;
&lt;p&gt;I could have occupied a bit more of the page space showcasing that if you try
to communicate on standard input and/or output the ssh client will terminate
since you will be messing with the SSH protocol flow, but I believe you will
trust me on this :).&lt;/p&gt;
&lt;p&gt;What can we do to interact with the user, yet to preserve the channel with the
parent ssh process? Well, the answer is quite obvious:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we have a pointer to the terminal session (file descriptor 2, the standard
    error, points to the terminal),&lt;/li&gt;
&lt;li&gt;so we just need to save pointers to the pipes&amp;rsquo; ends,&lt;/li&gt;
&lt;li&gt;re-open standard input and output with the terminal before we interact with
    the user,&lt;/li&gt;
&lt;li&gt;and restore these file descriptors back once we are ready to hand over the
    ssh session.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following version of the script demonstrates the implementation of the
above logic:&lt;/p&gt;
&lt;pre class="highlight" data-file="~/bin/interactive.script.sh"&gt;&lt;code class="language-bash"&gt;#!/bin/bash
exec 10&amp;lt;&amp;amp;0 11&amp;gt;&amp;amp;1 0&amp;lt;&amp;amp;2 1&amp;gt;&amp;amp;2
# start of the interactive behaviour
lsof -p $$
read -p &amp;quot;Type something: &amp;quot; I
echo &amp;quot;You typed: $I&amp;quot;
# finish of the interactive behaviour
exec 0&amp;lt;&amp;amp;10 1&amp;gt;&amp;amp;11
exec nc &amp;quot;$1&amp;quot; &amp;quot;$2&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think it is time to test it :) :&lt;/p&gt;
&lt;pre class="highlight" data-user="user"&gt;&lt;code class="language-shell"&gt;[user@localhost ~]$ ssh galaxy@localhost
COMMAND   PID   USER   FD   TYPE             DEVICE  SIZE/OFF     NODE NAME
bash    45238   user  cwd    DIR                1,2       612   893854 /Users/user/.ssh
bash    45238   user  txt    REG                1,2    628640  2329236 /bin/bash
bash    45238   user  txt    REG                1,2    625712 13892061 /usr/lib/dyld
bash    45238   user  txt    REG                1,2 385393734 13894121 /private/var/run/dyld_shared_cache_x86_64
bash    45238   user    0u   CHR               16,1  0t640407     9705 /dev/ttys001
bash    45238   user    1u   CHR               16,1  0t640407     9705 /dev/ttys001
bash    45238   user    2u   CHR               16,1  0t640407     9705 /dev/ttys001
bash    45238   user   10   PIPE 0x44d710995122378f     16384          -&amp;gt;0x44d71099589494ff
bash    45238   user   11   PIPE 0x44d7109951223d0f     16384          -&amp;gt;0x44d710995122454f
bash    45238   user  255r   REG                1,2       135 15455285 /Users/user/bin/interactive.script.sh
Type something: This is a test
You typed: This is a test
Last login: Mon Jul 25 17:57:05 2016 from localhost
$ logout
Connection to localhost closed.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mission accomplished! :)&lt;/p&gt;
&lt;p&gt;I hope this small article would help somebody to design better wrappers around
SSH. Keep in mind that you could always optimise it further. For example, recent
versions of OpenSSH support passing of a file descriptor from the ProxyCommand
script, so if you have a decent netcat tool that supports the &amp;ldquo;-F&amp;rdquo; option
(fdpass) you could get native performance for the ssh communication link with
no proxy process hanging around.&lt;/p&gt;
&lt;p&gt;P.S. if you have any questions do not hesitate to comment.&lt;/p&gt;</content><category term="ssh"></category><category term="ssh"></category><category term="console"></category></entry><entry><title>Raspberry Pi 3 toolchain on CentOS 7</title><link href="https://dmitry.khlebnikov.net/2016/05/22/raspberry-pi-3-toolchain-on-centos-7/" rel="alternate"></link><published>2016-05-22T12:00:00+10:00</published><updated>2020-05-17T04:45:11+10:00</updated><author><name>(GalaxyMaster)</name></author><id>tag:dmitry.khlebnikov.net,2016-05-22:/2016/05/22/raspberry-pi-3-toolchain-on-centos-7/</id><summary type="html">&lt;p&gt;I heard a lot about Raspberry Pi boards but until now I had no need nor time to
work with one.&lt;/p&gt;
&lt;p&gt;However, recently I purchased a Dodge Journey R/T and found that although I
love the car I am so disappointed with its software and hard-wired logic that I
decided to experiment a bit and fix the most annoying things.&lt;/p&gt;
&lt;p&gt;Since almost everything inside the car is talking over the CAN bus I needed
some kind of a enclave inside the car where I could run my code and
inject/intercept CAN messages.&lt;/p&gt;
&lt;p&gt;I looked around and found that &lt;span class="truncated"&gt;&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I heard a lot about Raspberry Pi boards but until now I had no need nor time to
work with one.&lt;/p&gt;
&lt;p&gt;However, recently I purchased a Dodge Journey R/T and found that although I
love the car I am so disappointed with its software and hard-wired logic that I
decided to experiment a bit and fix the most annoying things.&lt;/p&gt;
&lt;p&gt;Since almost everything inside the car is talking over the CAN bus I needed
some kind of a enclave inside the car where I could run my code and
inject/intercept CAN messages.&lt;/p&gt;
&lt;p&gt;I looked around and found that I can build the desired appliance using
Raspberry Pi 3 (Model B) + PiCAN 2 HAT board.&lt;/p&gt;
&lt;p&gt;Once the hardware was delivered to my home the time came to start building the
software side of things. My distribution of choice for this project became
CentOS 7 (userland), however, building stuff on the Raspberry Pi itself was a
painful and long process, so I needed a proper toolchain to be able to utilise
much more powerful hardware and do builds quicker.&lt;/p&gt;
&lt;p&gt;The following is a session dump (with some notes) on how I built my toolchain
on an AWS EC2 instance which was running a minimal CentOS 7 as its OS.&lt;/p&gt;
&lt;p&gt;I spawned an EC2 instance (you need at least 8GB of free space there to be able
to build the toolchain), logged in, and ensured that my system is up to date
(and update it if it was not):&lt;/p&gt;
&lt;pre class="highlight" data-user="root"&gt;&lt;code class="language-shell"&gt;[root@localhost ~]# yum -y update
Loaded plugins: at-exit, fastestmirror, post-transaction-actions
Loading mirror speeds from cached hostfile
 * base: mirror.domain.tld
 * extras: mirror.domain.tld
 * updates: mirror.domain.tld
No packages marked for update&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The easiest way to build a toolchain is to use the crosstool-ng project, so I
went ahead and downloaded the latest version with the corresponding GPG
signature, verified the signature (although the verification was very
superficial since Bryan Hundven is not in my Web of Trust and the crosstool-ng
website was not providing an HTTPS page to confirm the fingerprint of the key),
and unpacked the sources:&lt;/p&gt;
&lt;pre class="highlight" data-user="root"&gt;&lt;code class="language-shell"&gt;[root@localhost ~]# yum -y install bison bzip2 flex gcc gcc-c++ glibc-static gperf help2man libstdc++-static libtool make ncurses-devel texinfo wget
[root@localhost ~]# useradd -m build
[root@localhost ~]# su - build
[build@localhost ~]$ wget -q 'http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.22.0.tar.xz'
[build@localhost ~]$ wget -q 'http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.22.0.tar.xz.sig'
[build@localhost ~]$ gpg --recv-keys 35B871D1 --keyserver pgp.surfnet.nl
gpg: &amp;quot;--keyserver&amp;quot; not a key ID: skipping
gpg: &amp;quot;pgp.surfnet.nl&amp;quot; not a key ID: skipping
gpg: requesting key 35B871D1 from hkp server keys.gnupg.net
gpg: /home/build/.gnupg/trustdb.gpg: trustdb created
gpg: key 35B871D1: public key &amp;quot;Bryan Hundven &amp;quot; imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
[build@localhost ~]$ gpg --verify crosstool-ng-1.22.0.tar.xz.sig
gpg: Signature made Fri Nov 20 13:09:26 2015 UTC using RSA key ID 35B871D1
gpg: Good signature from &amp;quot;Bryan Hundven &amp;quot;
gpg:                 aka &amp;quot;Bryan Hundven &amp;quot;
gpg:                 aka &amp;quot;Bryan Hundven &amp;quot;
gpg:                 aka &amp;quot;Bryan Hundven &amp;quot;
gpg:                 aka &amp;quot;[jpeg image of size 3080]&amp;quot;
gpg:                 aka &amp;quot;[jpeg image of size 16246]&amp;quot;
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 561E D9B6 2095 88ED 23C6  8329 CAD7 C8FC 35B8 71D1
[build@localhost ~]$ tar xJSf crosstool-ng-1.22.0.tar.xz
[build@localhost ~]$ rm crosstool-ng-1.22.0.tar.xz*&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step was to prepare the environment for the crosstool-ng build process:&lt;/p&gt;
&lt;pre class="highlight" data-user="build"&gt;&lt;code class="language-shell"&gt;[build@localhost ~]$ cd crosstool-ng
[build@localhost ~]$ /configure --prefix=$HOME/ct-ng
checking build system type... x86_64-pc-linux-gnu
[skipped]
configure: creating ./config.status
config.status: creating Makefile
[build@localhost ~]$ make
  SED    'ct-ng'
[skipped]
  SED    'docs/ct-ng.1'
  GZIP   'docs/ct-ng.1.gz'
[build@localhost ~]$ make install
  GEN    'config/configure.in'
[skipped]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For auto-completion, do not forget to install &lt;code&gt;ct-ng.comp&lt;/code&gt; into your &lt;code&gt;bash&lt;/code&gt;
completion directory (usually &lt;code&gt;/etc/bash_completion.d/&lt;/code&gt;)&lt;/p&gt;
&lt;pre class="highlight" data-user="build"&gt;&lt;code class="language-shell"&gt;[build@localhost ~]$ export PATH=$HOME/ct-ng/bin:$PATH
[build@localhost ~]$ cd&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the above was done we are ready to actually configure and build our toolchain:&lt;/p&gt;
&lt;pre class="highlight" data-user="build"&gt;&lt;code class="language-shell"&gt;[build@localhost ~]$ mkdir ~/builddir
[build@localhost ~]$ cd ~/builddir
[build@localhost ~]$ ct-ng menuconfig&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was quite happy with the defaults and the only changes I made were the
following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Paths and misc options -&amp;gt; Try features marked as EXPERIMENTAL -&amp;gt; check&lt;/p&gt;
&lt;p&gt;You may skip this but I prefer to see all available options when I go
through the list of configurable parameters, hence I enabled this;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Target options -&amp;gt; Target Architecture -&amp;gt; arm&lt;/p&gt;
&lt;p&gt;My board is Raspberry Pi 3 (Model B) which runs on ARMv8 Cortex-A53, yours
may be different but most likely it is also ARM based :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Target options -&amp;gt; Bitness -&amp;gt; 64-bit&lt;/p&gt;
&lt;p&gt;There is actually almost no point in building a 64-bit version when you are
running on such a limited device as Raspberry, but at the time I was
writing this blog post I was building the AArch64 version of the toolchain.
I would recommend to stick with the 32-bit version of the toolchain if you
do not have any specific requirements for the 64-bit one;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Target options -&amp;gt; Architecture level -&amp;gt; armv8-a&lt;/p&gt;
&lt;p&gt;Since my only target was Raspberry Pi 3 (Model B) and the toolchain was
created for the personal use I did additional optimisation for my board.&lt;/p&gt;
&lt;p&gt;If you are not sure or if you want a toolchain that would produce more
compatible code for a range of ARM devices, then leave this setting at its
default, i.e. blank&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Target options -&amp;gt; Emit assembly for CPU -&amp;gt; cortex-a53&lt;/p&gt;
&lt;p&gt;Actually, this supersedes the previous option since it is more explicit. If
you are not optimising for a specific hardware, then leave it at the default
setting (which is blank).&lt;/p&gt;
&lt;p&gt;Also, there are more optimisations, e.g. you can specify that FPU for this
board is neon-fp-armv8, etc. but to keep it simple I decided not to
showcase that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Toolchain options -&amp;gt; Tuple&amp;rsquo;s vendor string -&amp;gt; rpi3&lt;/p&gt;
&lt;p&gt;This is optional but I like my toolchain to be as descriptive as possible,
e.g. with this setting binaries will be prefixed with
&lt;code&gt;aarch64-rpi3-linux-gnueabi-&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operating System -&amp;gt; Target OS -&amp;gt; linux&lt;/p&gt;
&lt;p&gt;It is essential to set this to &amp;ldquo;linux&amp;rdquo; otherwise &lt;code&gt;crosstool-ng&lt;/code&gt; will assume
that you are building a toolchain for a bare-bone hardware and the produced
binaries would not be properly linked to work with the OS on the board&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we are comfortable with the configuration of the future toolchain we exit
the configuration menu (saving the changes) and launch the build process (it
would take approximately an hour on AWS t2.small instance):&lt;/p&gt;
&lt;pre class="highlight" data-user="build" data-prompt=""[build@localhost"&gt;&lt;code class="language-shell"&gt;configuration written to .config

*** End of the configuration.
*** Execute 'ct-ng build' to start the build or try 'ct-ng help'.

[build@localhost ~]$ ct-ng build
[INFO ]  Performing some trivial sanity checks
[INFO ]  Build started 20160522.070915
[skipped]
[INFO ]  Build completed at 20160522.080629
[INFO ]  (elapsed: 57:14.18)
[INFO ]  Finishing installation (may take a few seconds)...
[57:15] /&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seems that our Raspberry Pi 3 toolchain is ready to be used. Let&amp;rsquo;s compile
something and see how it goes:&lt;/p&gt;
&lt;pre class="highlight" data-user="build"&gt;&lt;code class="language-shell"&gt;[build@localhost ~]$ export PATH=$HOME/x-tools/aarch64-rpi3-linux-gnueabi/bin:$PATH
[build@localhost ~]$ aarch64-rpi3-linux-gnueabi-gcc --version
aarch64-rpi3-linux-gnueabi-gcc (crosstool-NG crosstool-ng-1.22.0) 5.2.0
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[build@localhost ~]$ printf '#include \nint main(){printf(&amp;quot;Hello\\n&amp;quot;); return 0;}\n' &amp;gt; sample.c
[build@localhost ~]$ aarch64-rpi3-linux-gnueabi-gcc -o sample sample.c
[build@localhost ~]$ ls -l sample
-rwxr-xr-x. 1 build build 7672 May 22 08:19 sample
[build@localhost ~]$ file sample
sample: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 4.3.0, not stripped&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, it is time to build some awesome stuff for Raspberry Pi 3, I guess, but
this will be in another post. :)&lt;/p&gt;</content><category term="linux"></category><category term="console"></category><category term="howto"></category><category term="linux"></category><category term="raspberry pi"></category></entry><entry><title>Building a firewall? Simple and easy!</title><link href="https://dmitry.khlebnikov.net/2016/05/22/building-a-firewall-simple-and-easy/" rel="alternate"></link><published>2016-05-22T10:00:00+10:00</published><updated>2020-05-17T20:25:15+10:00</updated><author><name>(GalaxyMaster)</name></author><id>tag:dmitry.khlebnikov.net,2016-05-22:/2016/05/22/building-a-firewall-simple-and-easy/</id><summary type="html">&lt;p&gt;I strive for simplicity since I am a strong believer that achieving a goal with
the most simplest solution looks elegant, proves that you have deep knowledge
on the subject, and overall is beautiful by itself.  Additionally to this, a
simple solution is easier to comprehend and to audit, hence it is much easier
to ensure the security of such a solution.&lt;/p&gt;
&lt;p&gt;Over the last decade I stumbled upon numerous complicated firewalls erected on
the NAT boxes with tens (sometimes, hundreds!) of rules describing the traffic
flows and punched holes for some edge cases.  Every time I wondered what kind &lt;span class="truncated"&gt;&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I strive for simplicity since I am a strong believer that achieving a goal with
the most simplest solution looks elegant, proves that you have deep knowledge
on the subject, and overall is beautiful by itself.  Additionally to this, a
simple solution is easier to comprehend and to audit, hence it is much easier
to ensure the security of such a solution.&lt;/p&gt;
&lt;p&gt;Over the last decade I stumbled upon numerous complicated firewalls erected on
the NAT boxes with tens (sometimes, hundreds!) of rules describing the traffic
flows and punched holes for some edge cases.  Every time I wondered what kind
of a bug has bitten the person who composed such a convoluted ruleset that is a
nightmare to manage.&lt;/p&gt;
&lt;p&gt;In 99% of the cases I was able to come up with a ruleset of usually less than
20 rules for the whole firewall to achieve exactly the same result.  So, in
this article I will explain my approach on building firewalls that are easy to
support and to understand.&lt;/p&gt;
&lt;p&gt;Before you dive into optimising (or creating) your firewall there are some
things you need to have a clear understanding of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Networking&lt;/p&gt;
&lt;p&gt;You do not need to be an expert or a guru, but you should know fundamentals
about the protocols, standards, and internals of the networking related to
the area you are going to secure with the firewall.&lt;/p&gt;
&lt;p&gt;When you are in doubt, do not rely on an assumption: use search engines and
locate the corresponding RFC, standard, and/or any other authoritative
source of information documenting the protocol you are working with.&lt;/p&gt;
&lt;p&gt;It is impossible to know everything, but the common fallacy is that people
often create things based on wrong assumptions when it was a couple of
clicks away to research and understand the subject.  I have seen so many
times when people are &amp;ldquo;designing&amp;rdquo; their firewalls without a slightest clue
in regard to the standards covering interoperability of the hosts in the IP
network.&lt;/p&gt;
&lt;p&gt;For example, you can easily spot these &amp;ldquo;creations&amp;rdquo; if you look at the
ruleset and see that there is a rule that drops ICMP packets
unconditionally (or do not define any rules dealing with ICMP when the
default policy is &amp;ldquo;deny&amp;rdquo;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Traffic flows&lt;/p&gt;
&lt;p&gt;Think of a firewall as a filter that manages traffic flows (Figure 1 shows
a good visual representation of how traffic passes through the Linux
netfilter subsystem).&lt;/p&gt;
&lt;p&gt;Before you can make a decision in regard to whether to allow or deny
something you must know what your are dealing with and what outcome you
want to achieve.&lt;/p&gt;
&lt;p&gt;It would tremendously help you later if you could simply draw a diagram of
your network and overlay it with a layer documenting the inbound and
outbound flows of each node on the diagram.  Such a &amp;ldquo;data flow&amp;rdquo; diagram is
supposed to be a part of any solution documentation involving network
infrastructure, but in reality most of the enterprises (at least the ones I
worked with) simply forget to generate one.&lt;/p&gt;
&lt;p&gt;On such a diagram you would be able to see straight away what kind of
legitimate traffic is going to cross your firewall and what traffic is not
supposed to reach your firewall at all.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Goals&lt;/p&gt;
&lt;p&gt;This may sound obvious, but one of the most important things is to know
exactly what you are trying to achieve.  You are not building a firewall for
the sake of building a firewall, are you?&lt;/p&gt;
&lt;p&gt;Frankly speaking, there are just a handful number of scenarios for creating
a firewall (I fail to come up with more than five at this point) and all of
them are very simple.&lt;/p&gt;
&lt;p&gt;If your network provides any services to the external network (e.g.
Internet) there are just two options I can think of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Allow external entities to access services on defined public endpoints
   (an inbound flow) and allow unrestricted outbound traffic from your
   network to the external one (an outbound flow);&lt;/li&gt;
&lt;li&gt;Allow external entities to access services on defined public endpoints
   and restrict outbound traffic from your network to a defined set of
   external endpoints.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If your network does not provide any services to the external network and
only consumes resources from it, I see only two options:&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Disallow any access from the external entities to your resources, but
   allow your network to access the external endpoints and receive
   responses from there;&lt;/li&gt;
&lt;li&gt;The same as above, but restrict the outbound traffic to a selected set
   of the external endpoints.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The fifth scenario is the one I personally do not use and is the blacklist
approach:&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;allow everything in each direction and block communication for the
   specific endpoints only (be they external and/or internal).&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tools&lt;/p&gt;
&lt;p&gt;Last, but not least, is the requirement to know the corresponding toolset
you are going to utilise to achieve your goals.&lt;/p&gt;
&lt;p&gt;There are numerous high-level frameworks which are supposed to make systems
administrator&amp;rsquo;s life easier (e.g.  RHEL/CentOS/Fedora are using firewalld
on top of iptables), however, personally I prefer to work with iptables
directly (thus, my systems do not have firewalld installed).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before you start implementing the rules it often helps to describe your
firewall ruleset in simple sentences, e.g.:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;deny any incoming traffic to our network through the firewall unless it is
     explicitly allowed by the rules;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;allow any outbound traffic from our network through the firewall unless it
     is explicitly denied by the rules;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;deny any forwarding of traffic through the firewall unless it is
     explicitly allowed by the rules;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;allow anyone on the Internet to connect to the webserver on ports 80/tcp
     and 443/tcp;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;allow our office to connect to the firewall via SSH on port 22/tcp;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;allow traffic from our network to pass the firewall toward the Internet;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;allow the back channel traffic from the resources on the Internet to our
     network;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And then research how each of these sentences can be implemented using the
configuration language of the tool.  The point here is that you need to take
one step at a time and translate the logic exactly so you do not deviate from
your goals &amp;ndash; you will be able to optimise the result at a later stage.&lt;/p&gt;
&lt;p&gt;Well, it is time for a real world example, I guess.  The following snippet is
used as the skeleton for the iptables ruleset on systems I manage (this snippet
assumes that 192.168.0.0/16 is the internal network and that the ruleset is
installed on the NAT instance which is a gateway to the Internet):&lt;/p&gt;
&lt;pre class="highlight" data-file="/etc/sysconfig/iptables"&gt;&lt;code class="language-iptables"&gt;*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state INVALID -j DROP
# If it was already established pass bits through
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
# Allow for the local traffic
-A INPUT -i lo -j ACCEPT
# Let's MTU discovery and other network management to work properly
-A INPUT -p icmp -m icmp --icmp-type any -j ACCEPT
# Allow remote SSH logins on the specified port (should be &amp;lt;1024 and would require sshd re-configuration if the port is not standard)
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
# Allow DHCP client to get its information
-A INPUT -i eth0 -p udp -m state --state NEW -m udp --sport 67:68 --dport 67:68 -j ACCEPT

# Reject anything that we did not specifically allow above
-A INPUT -j REJECT --reject-with icmp-host-prohibited

# This is a NAT box, so we accept packets from our network designated to the world, but reject any other forwarding attempts.
-A FORWARD -i eth0 -s 192.168.0.0/22 ! -d 192.168.0.0/22 -j ACCEPT
-A FORWARD -i eth0 ! -s 192.168.0.0/22 -d 192.168.0.0/22 -j ACCEPT
# If there is a MTU mismatch between the NAT box and hosts behind it we want to allow ICMP for the MTU discovery
-A FORWARD -i eth0 -p icmp -m icmp --icmp-type any -s 192.168.0.0/22 -d 192.168.0.0/22 -j ACCEPT
# We may be interested in anything that is rejected in this chain, so let's log it
-A FORWARD -j LOG

# We do not allow to forward anything else
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
COMMIT

*nat
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -s 192.168.0.0/22 ! -d 192.168.0.0/22 -j MASQUERADE
COMMIT&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;default policies for INPUT and FORWARD are set to ACCEPT while the last
    rule in each chain is set to REJECT.  The reason for this is that the
    default policy can be either ACCEPT or DROP with the latter silently
    dropping packets.  Dropping packets makes it hard to investigate network
    issues, hence I prefer REJECT instead.&lt;/li&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if you need to open more ports the best place to insert your rules would be
    between SSH and DHCP rules in the INPUT chain&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if you are setting up a firewall on the server (so no traffic forwarding is
    needed) you may want to either drop all rules from the FORWARD chain and
    set the default policy for that chain to DROP, or you can simply leave the
    last two rules (LOG and REJECT) in the chain removing the rest.  Also, the
    nat table is not needed on the servers, so should be omitted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the above ruleset is not strict enough in regard to filtering ICMP traffic
    and allows all types of ICMP, perhaps it could be further tightened to
    allow only ICMP types 0 (reply), 3 (destination unreachable), 8 (request),
    11 (time exceeded), and 30 (traceroute) to pass through the firewall.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, here you have it a solid firewall ruleset consisting of just 13 rules.&lt;/p&gt;</content><category term="linux"></category><category term="console"></category><category term="howto"></category><category term="iptables"></category><category term="linux"></category><category term="security"></category></entry><entry><title>Transparent SSH host-jumping (Advanced)</title><link href="https://dmitry.khlebnikov.net/2015/08/06/transparent-ssh-host-jumping-advanced/" rel="alternate"></link><published>2015-08-06T10:00:00+10:00</published><updated>2020-05-17T20:25:15+10:00</updated><author><name>(GalaxyMaster)</name></author><id>tag:dmitry.khlebnikov.net,2015-08-06:/2015/08/06/transparent-ssh-host-jumping-advanced/</id><summary type="html">&lt;p&gt;In this brief article I am going to describe how I resolved a nagging issue I
had with setting up access to hosts which are not directly reachable, but where
you need to forward your connection through an intermediate host.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dmitry.khlebnikov.net/2010/12/10/ssh-port-forwarding-intermediate/"&gt;Previously&lt;/a&gt;, I was using the local SSH port-forwarding technique (although I
was configuring hosts I connect to in the &lt;code&gt;~/.ssh/config&lt;/code&gt; file instead of
using the command-line options). However, this approach turned out to be quite
inconvenient since every time I wanted to connect to a new host (and, possibly,
through a new intermediate host) I had to edit my &lt;span class="truncated"&gt;&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this brief article I am going to describe how I resolved a nagging issue I
had with setting up access to hosts which are not directly reachable, but where
you need to forward your connection through an intermediate host.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dmitry.khlebnikov.net/2010/12/10/ssh-port-forwarding-intermediate/"&gt;Previously&lt;/a&gt;, I was using the local SSH port-forwarding technique (although I
was configuring hosts I connect to in the &lt;code&gt;~/.ssh/config&lt;/code&gt; file instead of
using the command-line options). However, this approach turned out to be quite
inconvenient since every time I wanted to connect to a new host (and, possibly,
through a new intermediate host) I had to edit my SSH configuration file and
add something like the following:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-ssh_config"&gt;Host intermediate
    HostName 192.168.1.1
    HostKeyAlias intermediate
    LocalForward 10001 target:22

Host target
    HostName 127.0.0.1
    HostKeyAlias target
    Port 10001&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upon closer examination of my day-to-day routine I found two things that
frustrated me the most:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;My &lt;code&gt;~/.ssh/config&lt;/code&gt; file was growing uncontrollably and became hard to
     navigate;&lt;/li&gt;
&lt;li&gt;Each time I needed to connect to the target host through the intermediate
     host I had to open two sessions with one of them being idle most of the
     time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After a while I stumbled upon an article describing quite a generic way to
tunnel through an intermediate host and found the approach quite convenient for
the day-to-day use. So, I have added the following block into my &lt;code&gt;~/.ssh/config&lt;/code&gt;
file just before the &lt;code&gt;Host *&lt;/code&gt; section:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-ssh_config"&gt;Host */*
    ProxyCommand ssh $(dirname %h) -W $(basename %h):%p&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From that point on, I could connect to a target host via an intermediate one
by simply executing the following command:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;ssh user@intemediate/target&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The configuration with the &lt;code&gt;ProxyCommand&lt;/code&gt; directive was spawning two &lt;code&gt;ssh&lt;/code&gt;
processes with one connected to the intermediate host in the background and the
other proxied through the intermediate host and connected to the target running
in the foreground, so from my point of view I had just one terminal session
open. The configuration allowed to chain as many hosts as I wanted, e.g.:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;ssh user@hostA/hostB/hostC/hostD&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above would result in three &lt;code&gt;ssh&lt;/code&gt; processes running in the background (the
first connected to hostA, the second connected to &lt;em&gt;hostB&lt;/em&gt; proxied through &lt;em&gt;hostA&lt;/em&gt;,
and the third connected to &lt;em&gt;hostC&lt;/em&gt; proxied through &lt;em&gt;hostB&lt;/em&gt;) and one foreground
process which was connected to &lt;em&gt;hostD&lt;/em&gt; proxied via &lt;em&gt;hostC&lt;/em&gt;. This is great and quite
flexible to use, however, this approach has a number of limitations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you cannot specify different ports for different hosts in a chain;&lt;/li&gt;
&lt;li&gt;neither can you use different login names for different hosts in the chain;&lt;/li&gt;
&lt;li&gt;establishing connection to different chains sharing a part of the chain
    would not reuse already established connections, i.e. slow connection times.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Personally, I am using the same login name and the same ports on hosts I am
accessing, so the first two items were not an issue for me, but the last one
was irritating enough and I decided to figure out whether it is possible to
optimise it. After a bit of reading the documentation and a few attempts I came
up with the following configuration block in my &lt;code&gt;~/.ssh/config&lt;/code&gt; file (remember,
this block should be placed &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;Host *&lt;/code&gt; one):&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-ssh_config"&gt;Host */*
    ControlMaster auto
    ControlPath   ~/.ssh/.sessions/%r@%h:%p
    ProxyCommand /bin/sh -c 'mkdir -p -m700 ~/.ssh/.sessions/&amp;quot;%r@$(dirname %h)&amp;quot; &amp;amp;&amp;amp; exec ssh -o &amp;quot;ControlMaster auto&amp;quot; -o &amp;quot;ControlPath   ~/.ssh/.sessions/%r@$(dirname %h):%p&amp;quot; -o &amp;quot;ControlPersist 120s&amp;quot; -l %r -p %p $(dirname %h) -W $(basename %h):%p'&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s review it line by line, so the logic is clear:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-ssh_config"&gt;Host */*&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This host definition block would catch any host specified on the &lt;code&gt;ssh&lt;/code&gt; command
line when the host name matches the &lt;code&gt;*/*&lt;/code&gt; pattern, so &lt;code&gt;ssh hostA/hostB/hostC&lt;/code&gt;
will be matched as &lt;code&gt;hostA/hostB&lt;/code&gt; being the first part before &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;hostC&lt;/code&gt; as
the second part after &lt;code&gt;/&lt;/code&gt;. Due to a recursive call to &lt;code&gt;ssh&lt;/code&gt; (see below) this
block will be recursively applied to all hosts in the specified chain.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-ssh_config"&gt;    ControlMaster auto&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This directive instructs &lt;code&gt;ssh&lt;/code&gt; to try to reuse an existing control channel to
communicate with the remote host, and if such a channel does not exist it will
be created, so further connections to the same remote host would benefit from
a speedup provided by the already established connection.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-ssh_config"&gt;    ControlPath ~/.ssh/.sessions/%r@%h:%p&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This directive provides &lt;code&gt;ssh&lt;/code&gt; with the location of the control channel socket
file. The socket file should be unique for each remote host. Since we are
reusing the existing connection and skipping the authentication the socket file
should be tagged with the corresponding login name, this is why we are using %r
(remote login name), %h (the remote host name), and %p (the remote port) as
part of the file name. Please note that due to our usage of &amp;ldquo;/&amp;rdquo; as a host
separator in the chain the path constructed here will have a subdirectory
defined in the middle of the %h expansion. &lt;code&gt;ssh&lt;/code&gt; would not automatically create
that subdirectory, so it is something we need to address (see below)&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-ssh_config"&gt;    ProxyCommand …&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the heart of the whole block. I am starting this proxy command with
&lt;code&gt;/bin/sh -c '…'&lt;/code&gt; since &lt;code&gt;ssh&lt;/code&gt; is &lt;code&gt;exec()&lt;/code&gt;uting the specified command (this
replaces the spawned shell and makes it impossible to conditionally chain
commands), therefore I am using the shell binary as the proxy command to get
the ability to script my logic. Then I am creating the required directory
structure for the control channels under &lt;code&gt;~/.ssh/.sessions&lt;/code&gt; (note the &lt;code&gt;-p&lt;/code&gt;
argument to &lt;code&gt;mkdir&lt;/code&gt;, this will create all the missing parts of the specified
tree, but also would silence &lt;code&gt;mkdir&lt;/code&gt; in case all of the directories already
exist). It is worth to mention that with this &lt;code&gt;mkdir&lt;/code&gt; command I am creating the
subdirectory for the &lt;code&gt;ControlPath&lt;/code&gt; defined for the enclosing &lt;code&gt;Host */*&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;The second part of the command line is conditionally executing &lt;code&gt;ssh&lt;/code&gt; if &lt;code&gt;mkdir&lt;/code&gt;
did not report any issues. It is good to execute &lt;code&gt;ssh&lt;/code&gt; here since we do not
need a redundant shell hanging around in the process tree. In this recursive
&lt;code&gt;ssh&lt;/code&gt; call we explicitly specify that we also need multiplexing of the control
channels created by the parent connections (they are &amp;ldquo;parent&amp;rdquo; since this is the
connection that established first and which enables access to the hosts further
down the specified chain) as well as we explicitly specify the location of the
control channel (note that since it is a parrent connection we are stripping
the rest of host names from the &lt;code&gt;%h&lt;/code&gt; macro using &lt;code&gt;dirname&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, the third explicitly specified directive is &lt;code&gt;ControlPersist&lt;/code&gt; which is
set to &lt;code&gt;120s&lt;/code&gt;. This directive instructs &lt;code&gt;ssh&lt;/code&gt; to stay in the background and
maintain the control channel in case we decide to reuse it, but if no activity
on the control channel is detected for 2 minutes the &lt;code&gt;ssh&lt;/code&gt; process would
terminate. Without this directive the moment you close the connection which was
the master connection all dependent connections would also be closed, e.g. if
you have two sessions: one to &lt;code&gt;hostA/hostB&lt;/code&gt; and the other to &lt;code&gt;hostA/hostC&lt;/code&gt;, the
moment you closed the first connection the second one will be immediately
terminated if you do not have the &lt;code&gt;ControlPersist&lt;/code&gt; configured.&lt;/p&gt;
&lt;p&gt;The rest of the &lt;code&gt;ssh&lt;/code&gt; arguments is obvious: we connect to the first host in the
provided host chain (we are extracting that part with &lt;code&gt;dirname %h&lt;/code&gt;) and we are
proxying stdin/stdout to the last host in the supplied chain with the &lt;code&gt;-W&lt;/code&gt;
option.&lt;/p&gt;
&lt;p&gt;Basically, the control flow when you do &lt;code&gt;ssh user@hostA/hostB/hostC&lt;/code&gt; is the
following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ssh&lt;/code&gt; matches the &lt;code&gt;*/*&lt;/code&gt; pattern against the provided host name
     (&lt;code&gt;hostA/hostB/hostC&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ssh&lt;/code&gt; tries to reuse the control channel by attempting to open the
     &lt;code&gt;~/.ssh/.sessions/user@hostA/hostB/hostC:22&lt;/code&gt; socket, if successful the
     connection is established and the command prompt is displayed to the
     calling user, otherwise the execution continues&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ssh&lt;/code&gt; executes the defined &lt;code&gt;ProxyCommand&lt;/code&gt; command&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the first part of the command creates &lt;code&gt;~/.ssh/.sessions/hostA/hostB&lt;/code&gt; if it
     is not there&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the second part executes&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;ssh … -o &amp;quot;ControlPath ~/.ssh/.sessions/user@hostA/hostB:22&amp;quot; … hostA/hostB -W hostC:22&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will initiate another round of the above steps, but with a shorter chain
 and it will be recursive until there is just a single host left, e.g. when
 we ascend to &lt;code&gt;hostA&lt;/code&gt; as the host to connect to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;now, with connected stdin/stdout to port 22 on &lt;code&gt;hostC&lt;/code&gt; (in the last
     iteration) &lt;code&gt;ssh&lt;/code&gt; performs the authentication against &lt;code&gt;hostC&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if authentication is successful &lt;code&gt;ssh&lt;/code&gt; creates the
     &lt;code&gt;~/.ssh/.sessions/user@hostA/hostB/hostC:22&lt;/code&gt; control channel socket and
     becomes the master of that control channel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a command prompt is displayed to the calling user&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I hope this little trick will save you some time and will make your life
easier. :)&lt;/p&gt;</content><category term="ssh"></category><category term="console"></category><category term="ssh"></category><category term="howto"></category></entry><entry><title>Should we use "sudo" for day-to-day activities?</title><link href="https://dmitry.khlebnikov.net/2015/07/18/should-we-use-sudo-for-day-to-day-activities/" rel="alternate"></link><published>2015-07-18T20:04:00+10:00</published><updated>2020-05-17T04:45:11+10:00</updated><author><name>(GalaxyMaster)</name></author><id>tag:dmitry.khlebnikov.net,2015-07-18:/2015/07/18/should-we-use-sudo-for-day-to-day-activities/</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#history"&gt;History&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#people-are-saying-sudo-is-good-is-it-true"&gt;People are saying &amp;ldquo;sudo&amp;rdquo; is good. Is it true?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-the-problem-with-the-sudo-approach"&gt;What is the problem with the &amp;ldquo;sudo&amp;rdquo; approach?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-light-side-of-sudo-is-there-one"&gt;The light side of &amp;ldquo;sudo&amp;rdquo;. Is there one?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-can-we-improve-the-security-of-our-systems-in-relation-to-the-sudo-usage"&gt;How can we improve the security of our systems in relation to the &amp;ldquo;sudo&amp;rdquo; usage?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;None of the systems I administer or supervise have &lt;code&gt;sudo&lt;/code&gt; installed with the
SUID bit set.&lt;/p&gt;
&lt;p&gt;Every time I answer a question on how to do privileged work on these systems
(i.e. do tasks that require administrator privileges) with a proposal to SSH
under the privileged account directly to do such a work, whoever asked &lt;span class="truncated"&gt;&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#history"&gt;History&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#people-are-saying-sudo-is-good-is-it-true"&gt;People are saying &amp;ldquo;sudo&amp;rdquo; is good. Is it true?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-the-problem-with-the-sudo-approach"&gt;What is the problem with the &amp;ldquo;sudo&amp;rdquo; approach?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-light-side-of-sudo-is-there-one"&gt;The light side of &amp;ldquo;sudo&amp;rdquo;. Is there one?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-can-we-improve-the-security-of-our-systems-in-relation-to-the-sudo-usage"&gt;How can we improve the security of our systems in relation to the &amp;ldquo;sudo&amp;rdquo; usage?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;None of the systems I administer or supervise have &lt;code&gt;sudo&lt;/code&gt; installed with the
SUID bit set.&lt;/p&gt;
&lt;p&gt;Every time I answer a question on how to do privileged work on these systems
(i.e. do tasks that require administrator privileges) with a proposal to SSH
under the privileged account directly to do such a work, whoever asked the
question starts to blabber how insecure that is, that one should use &lt;code&gt;sudo&lt;/code&gt;,
and that nobody should ever login directly as root.&lt;/p&gt;
&lt;p&gt;I have spent quite some time explaining the misconception behind so-called
&amp;ldquo;secure way to access systems through sudo&amp;rdquo;, so I decided to write up an
article that describes the issues of using that approach and why using &lt;code&gt;sudo&lt;/code&gt;
is actually &lt;em&gt;less secure&lt;/em&gt; than a direct SSH access.&lt;/p&gt;
&lt;h2 id="history"&gt;History&lt;/h2&gt;
&lt;p&gt;The following is based on my personal recollection of the history around early
90’s with some references to documents I could quickly find.  Unfortunately, this
is one of the topics that is not so easy to reconstruct in full detail.
Although there may be minor inaccuracies, the outlined view on the history
should be very close to the true events that took place.&lt;/p&gt;
&lt;p&gt;Many years ago (but not that far in the past) system administrators were using
&lt;code&gt;telnet&lt;/code&gt; and &lt;code&gt;rsh&lt;/code&gt; to access and administer their servers.  Networks were
simpler and traffic sniffing techniques were common.  Therefore, it was very
easy to eavesdrop on a root account login and to automate the task of gathering
the credentials.  To mitigate the issue to some extent the following approach
was proposed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;login as a non-privileged account first;&lt;/li&gt;
&lt;li&gt;do some stuff;&lt;/li&gt;
&lt;li&gt;if you need privileged account access (e.g. root) switch to it using &lt;code&gt;su&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The idea behind this proposal was that such a sequence makes it harder for a
traffic listener to catch root’s credentials on the wire due to the login
sequence mixed in to the stream of other activities the systems administrator
was doing before escalating their account to the privileged user.&lt;/p&gt;
&lt;p&gt;At approximately the same time discussions started in regard to the dangers
of working as root, that people were tending to work as root for prolonged
periods of time performing tasks that did not require escalated privileges
without proper justification for that behaviour.  As the result of these
discussions the &lt;code&gt;sudo&lt;/code&gt; utility was born.  The utility allowed to bind root
privileges to a restricted set of commands and maintained access controls
through its configuration file in order to allow or deny access to the defined
functionality to specific users/groups.  This allowed systems administrators to
delegate some of the privileged routines to less privileged user/groups. (See
more on the &lt;a href="https://www.sudo.ws/sudo/history.html"&gt;history of sudo&lt;/a&gt; if you are interested).&lt;/p&gt;
&lt;p&gt;Somewhere in early 90’s the two approaches were merged, so the approach became:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;login as a non-privileged account and do your every day tasks;&lt;/li&gt;
&lt;li&gt;once a privileged operation is required execute it through &lt;code&gt;sudo&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Although it seems like a minor optimisation, in fact, this introduced a &lt;em&gt;major
security issue&lt;/em&gt;: previously, the attacker should have needed to listen for
traffic in attempt to figure out when the victim is executing &lt;code&gt;su&lt;/code&gt; and is
providing root&amp;rsquo;s password, but now they did not need to do anything except of
capturing user&amp;rsquo;s password at the beginning of the session (the same problem the
&amp;ldquo;su-after-normal-login&amp;rdquo; approach was trying to solve just reappeared :) ) since
once you know user&amp;rsquo;s password you can use &lt;code&gt;sudo&lt;/code&gt; which authenticates you with
&lt;em&gt;user&amp;rsquo;s&lt;/em&gt; password!&lt;/p&gt;
&lt;p&gt;In 1995, &lt;a href="https://en.wikipedia.org/wiki/Tatu_Yl%C3%B6nen"&gt;Tatu Ylönen&lt;/a&gt; as a response to the issues related to exchanging the
credentials over non-protected, easily sniffable networks released his first
implementation of the SSH protocol as freeware to the public.  Over the next
five years SSH was adopted worldwide and it eventually replaced
&lt;code&gt;telnet&lt;/code&gt;/&lt;code&gt;rlogin&lt;/code&gt;/&lt;code&gt;rsh&lt;/code&gt; for the remote access and management activities in most
places around the globe.&lt;/p&gt;
&lt;p&gt;However, due to inertia the recommended approach of logging in as a
non-privileged account and escalating privileges later somehow survived, is
still followed, and often people don’t even try to analyse and see the flaws of
the approach.&lt;/p&gt;
&lt;h2 id="people-are-saying-sudo-is-good-is-it-true"&gt;People are saying &amp;ldquo;sudo&amp;rdquo; is good. Is it true?&lt;/h2&gt;
&lt;p&gt;&lt;sup&gt;(or looking critically into some common misconceptions re: &amp;ldquo;sudo&amp;rdquo;)&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;So let’s look at the most commonly used &amp;ldquo;pros&amp;rdquo; in favour of using &lt;code&gt;sudo&lt;/code&gt;. For
example, &lt;a href="https://help.ubuntu.com/community/RootSudo"&gt;Ubuntu’s community help page&lt;/a&gt; provides a nice, aggregated list of
benefits provided by &lt;code&gt;sudo&lt;/code&gt; usage in their default installation. Let’s walk
through all of them and see if they are real benefits at all:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The installer has fewer questions to ask.&lt;/p&gt;
&lt;p&gt;This is a very questionable &amp;ldquo;benefit&amp;rdquo; to the end user since it implies
 that the system would do more stuff with escalated privileges behind the
 scenes without the user even knowing it. From the security standpoint it
 just silently expands the attack surface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Users don&amp;rsquo;t have to remember an extra password for occasional use (i.e.
     the root password). If they did, they&amp;rsquo;d be likely to forget it (or record
     it unsafely, allowing anyone to easily crack into their system).&lt;/p&gt;
&lt;p&gt;This is another hard to comprehend &amp;ldquo;benefit&amp;rdquo;. Given that we now have SSH
 and the recommended best practice is to use SSH keys instead of passwords,
 &lt;code&gt;sudo&lt;/code&gt; requires users to memorise yet another password.&lt;/p&gt;
&lt;p&gt;Moreover, the argument in regard to users’ likely behaviour is purely
 speculative and assumptive — to the same extent we can assume that
 password policies make it hard for users to memorise their passwords and
 they would be likely to forget the password (or record it unsafely, …).&lt;/p&gt;
&lt;p&gt;The truth is, the key based authentication solves the issue of the
 requirement to have multiple passwords for multiple accounts.&lt;/p&gt;
&lt;p&gt;There is one place, however, where the discussed &amp;ldquo;benefit&amp;rdquo; is actually
 applicable — local console access (no key authentication there, usually),
 but even there the best practice would be to login directly as root on
 the virtual console if there is such a need (the reason for that is
 quite complicated and in short could be described as the following: there
 are multiple checks and assumptions in the kernel code and the
 accompanying C library on allocating a terminal, spawning a process, etc.
 for root over the same actions performed for a non-privileged user).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It avoids the &amp;ldquo;I can do anything&amp;rdquo; interactive login by default. You will
     be prompted for a password before major changes can happen, which should
     make you think about the consequences of what you are doing.&lt;/p&gt;
&lt;p&gt;This statement also assumes that for some reason people would prefer to
 always login as root and do all of their work under that account.&lt;/p&gt;
&lt;p&gt;In reality users are so used to prefix almost any failed command with
 &lt;code&gt;sudo&lt;/code&gt; that this &amp;ldquo;benefit&amp;rdquo; can be considered as the quite opposite item,
 against &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On a properly configured environment you explicitly need to login as the
 privileged account to do functions that require privileges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sudo adds a log entry of the command(s) run (in /var/log/auth.log). If you
     mess up, you can go back and see what commands were run.&lt;/p&gt;
&lt;p&gt;This statement is also somewhat true, but it does not defend the &lt;code&gt;sudo&lt;/code&gt;
 usage. A proper auditing subsystem is what keeps audit logs no matter how
 activity was performed. Logging of executed commands for user&amp;rsquo;s history
 reasons is the job for the shell.&lt;/p&gt;
&lt;p&gt;The ability of logging is so limited in &lt;code&gt;sudo&lt;/code&gt; that it cannot be used for
 anything except a substitute for the shell history. Just imagine the
 following scenario — a user executes:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;sudo less /var/log/messages&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then types &amp;ldquo;!&amp;rdquo; followed by the Enter/Return key — the user effectively
 now in the root shell and what &lt;code&gt;sudo&lt;/code&gt; will log into its logs has nothing
 to do with what user actually did.&lt;/p&gt;
&lt;p&gt;Instead of relying on &lt;code&gt;sudo&lt;/code&gt;&amp;lsquo;s logging abilities, one should configure
 &lt;code&gt;auditd&lt;/code&gt; and send events to a centralised log aggregator to get audit logs
 that can be trusted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On a server, every cracker trying to brute-force their way in will know it
     has an account named root and will try that first. What they don&amp;rsquo;t know is
     what the usernames of your other users are. Since the root account
     password is locked, this attack becomes essentially meaningless, since
     there is no password to crack or guess in the first place.&lt;/p&gt;
&lt;p&gt;This is such a weak attempt to bring host security into the play that it
 is hard to comment on it without dropping a tear :).&lt;/p&gt;
&lt;p&gt;First, use SSH keys and disable the password authentication on the server
 — this (and not some security through obscurity) will defend the system
 from the brute force attacks.&lt;/p&gt;
&lt;p&gt;Second, protect your remote access entry points with properly configured
 firewall and allow remote access from a defined list of locations only
 (i.e. whitelist authorised locations) — this will shrink the possible
 attack surface of the SSH service considerably.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allows easy transfer for admin rights by adding and removing users from
     groups. When you use a single root password, the only way to de-authorize
     users is to change the root password.&lt;/p&gt;
&lt;p&gt;This is an interesting one: half of the statement is true, another is
 misleading.&lt;/p&gt;
&lt;p&gt;The true part is that you can easily delegate privileged operations using
 &lt;code&gt;sudo&lt;/code&gt;.  All in all, it was the primary goal and requirement of the tool
 creation to provide access delegation.&lt;/p&gt;
&lt;p&gt;The misleading part is that the alternative is to use a single root
 account/password.  The truth is that nobody is limited by a single root
 account: you can create as many as you want and each of them could have
 their own distinct password, e.g.&lt;/p&gt;
&lt;pre class="highlight" data-user="root"&gt;&lt;code class="language-shell"&gt;[root@localhost ~]# useradd -om -o 0 -g 0 -s /bin/sh new_root
[root@localhost ~]# passwd new_root&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Better yet, do not set the password and lock the account instead with
 &lt;code&gt;usermod -L new_root&lt;/code&gt; since we are using keys, remember?&lt;/p&gt;
&lt;p&gt;This approach also provides additional accountability since users will
 have separate shell histories, their login attempts will be clearly logged
 under separate names, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sudo can be setup with a much more fine-grained security policy.&lt;/p&gt;
&lt;p&gt;Another half-truth in the list of &amp;ldquo;benefits&amp;rdquo;. The statement is incomplete
 and lacks the part it is comparing the functionality to.  If we are
 comparing a legacy Unix access control system with &lt;code&gt;sudo&lt;/code&gt;, then yes &lt;code&gt;sudo&lt;/code&gt;
 is much more configurable. If we compare &lt;code&gt;sudo&lt;/code&gt; with, say, SELinux or
 GRsecurity’s RBAC &amp;ndash; &lt;code&gt;sudo&lt;/code&gt; will lose since both have much more
 fine-grained security controls than &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The root account password does not need to be shared with everybody who
     needs to perform some type of administrative task(s) on the system (see
     the previous bullet).&lt;/p&gt;
&lt;p&gt;As with item #6 this statement assumes for some obscure reason that there
 can be just a single root account in the system.  Therefore, the result of
 such a logical exercise is also questionable since it is based on a wrong
 assumption.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The authentication automatically expires after a short time (which can be
     set to as little as desired or 0); so if you walk away from the terminal
     after running commands as root using sudo, you will not be leaving a root
     terminal open indefinitely.&lt;/p&gt;
&lt;p&gt;This statement also compares &lt;code&gt;sudo&lt;/code&gt; with something reader cannot compare
 to.  Moreover, it mixes up two logically unrelated things: the credentials
 expiration and terminal security.  While it is great that &lt;code&gt;sudo&lt;/code&gt; implements
 the former, the latter is usually addressed by entirely different means:
 starting with auto-logout functionality, lock screen, physical security,
 etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well, we can continue to critically assess other common statements in regard to
&lt;code&gt;sudo&lt;/code&gt; made mostly by people who do not have any strong Information Security
background, but it would be a waste of time for the readers.&lt;/p&gt;
&lt;p&gt;You can always raise a question regarding some particular claim and/or
assumption related to &lt;code&gt;sudo&lt;/code&gt; and if it is interesting I would add it (and the
corresponding response) to this article.&lt;/p&gt;
&lt;h2 id="what-is-the-problem-with-the-sudo-approach"&gt;What is the problem with the &amp;ldquo;sudo&amp;rdquo; approach?&lt;/h2&gt;
&lt;p&gt;Well, there are several in fact. The most pressing issue is that the usage of
&lt;code&gt;sudo&lt;/code&gt; (or &lt;code&gt;su&lt;/code&gt;, or any other utility that has its SUID bit set) is crossing
the security boundary from the less privileged account to the more privileged
account. This opens doors (or widens the attack surface) to privilege
escalation techniques. In plain English it makes the non-privileged account to
be essentially equal to the privileged one, let me explain by a fairly simple
example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;imagine if you are a developer and you work on a server under your
     non-privileged account;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;as a part of your daily routine you need to download some third party
     package and install it (we are going to leave out all the security
     complexities involved with such an activity like verifying signatures,
     using a separate instance to prepare a package for deployment, etc.);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the installation of the package usually requires executing some third
     party code under your non-privileged account. This code was not written by
     you and there is a high chance that you did not read/verify the foreign
     code line by line in order to ensure that it does not do anything
     malicious since this would be quite time consuming, would require a lot of
     effort, and your team has more important priorities than this (remember,
     this is an example based on situations you would encounter in the real
     world, which is by no means perfect);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it happens, that that particular third party was compromised and some
     malicious code has been injected into the package installation routines;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;after the execution of the installation routine (and the malicious code
     for that matter) your &lt;code&gt;~/.bashrc&lt;/code&gt; (for example) is modified in such a way
     that each time you login it starts up a key logger or some other kind of
     remotely controllable piece of software that talks back to its master;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So far we just got an issue localised to this non-privileged account only (with
a possibility to spread across the entire fleet of servers that non-privileged
account has access to in case of the NFS mounted home directories). Is this
bad? Yes, it is since it may disrupt this particular project, steal reachable
sensitive information, could be used as a trampoline to jump start further
research and exploitation of other vulnerable resources. Is it critically bad?
Not necessarily. If the systems are built properly with host-based security in
mind, if the proper privilege separation techniques are used throughput the
company infrastructure, etc. the impact is localised and with proper monitoring
systems it would be detected eventually and investigated (keep in mind that it
is really hard for a non-privileged account to hide their activities from more
privileged processes).&lt;/p&gt;
&lt;p&gt;Now, let’s add &lt;code&gt;sudo&lt;/code&gt; to the mix, e.g. suddenly the developer decided to
install an additional library package into the system. So, what would happen
next? You guessed it: the developer would need to type in their password to
convince &lt;code&gt;sudo&lt;/code&gt; that they are &amp;ldquo;allowed&amp;rdquo; to do such a privileged thing as
installing a system package, the malicious software installed by the attacker
would happily intercept that and send it back to its master.&lt;/p&gt;
&lt;p&gt;From this point on, the attacker has the account password of the account where
their software runs and which they control. The attacker can now utilise &lt;code&gt;sudo&lt;/code&gt;
powers at their will. The security impact would be ranging from &amp;ldquo;high&amp;rdquo; to
&amp;ldquo;extreme&amp;rdquo; depending on how committed the attackers are.&lt;/p&gt;
&lt;p&gt;Following the logic, why would we want to introduce an additional complexity
that does not address the issue it was supposed to address, which is &amp;ldquo;to limit
exposure of the root account&amp;rdquo;?&lt;/p&gt;
&lt;h2 id="the-light-side-of-sudo-is-there-one"&gt;The &lt;em&gt;light&lt;/em&gt; side of &amp;ldquo;sudo&amp;rdquo;. Is there one?&lt;/h2&gt;
&lt;p&gt;So, is &lt;code&gt;sudo&lt;/code&gt; any good for anything? Actually, yes, it is. All in all, &lt;code&gt;sudo&lt;/code&gt;
is a tool that attracts a lot of attention from the security researchers and
auditors, its codebase got numerous peer reviews and the functionality the tool
provides can be used for good. The following scenarios come to my mind right
away:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On a SELinux enabled system it seems that &lt;code&gt;sudo&lt;/code&gt; is the only properly
   implemented and reliable way to assume a different SELinux role. All other
   mechanisms are either lacking in the functionality or just do it half way
   leaving some artefacts behind;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unless some effort is put into tweaking the way PAM (Pluggable
   Authentication Modules, an authentication framework used on Linux, Solaris,
   and some other Unix-like systems) authenticates users on LDAP enabled
   systems there is no easy way to have two separate accounts (a privileged and
   a non-privileged account) for the same LDAP user. This could be addressed
   administratively (e.g. by defining additional privileged users in LDAP) or
   technically by implementing account names’ prefixes. However, if there are
   budgetary and/or time constraints to implement the proper security framework
   &lt;code&gt;sudo&lt;/code&gt; with a quite restricted configuration would be an acceptable
   compromise.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, personally, I failed to find any other justified applications of
&lt;code&gt;sudo&lt;/code&gt; in a secure environment and would be happy to get some feedback if you
have something in mind worth including into the list above.&lt;/p&gt;
&lt;h2 id="how-can-we-improve-the-security-of-our-systems-in-relation-to-the-sudo-usage"&gt;How can we improve the security of our systems in relation to the &amp;ldquo;sudo&amp;rdquo; usage?&lt;/h2&gt;
&lt;p&gt;OK, so we got to the point where we are standing at a crossroad and we kind
of established that excessive usage of &lt;code&gt;sudo&lt;/code&gt; is a bad thing (for
security-paranoid readers - read: &amp;ldquo;almost any usage of &lt;code&gt;sudo&lt;/code&gt; except for
changing SELinux roles on a SELinux-enabled system is a bad thing&amp;rdquo;). So, what
is the alternative way of doing things? Well, there is a complex approach on
addressing and minimising the privilege escalation risks and roughly it can be
summarised as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;apply the &lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege"&gt;least privilege principle&lt;/a&gt; to everything&lt;/p&gt;
&lt;p&gt;For example, if you need to work on content, the account you use to log
into the remote server should be allowed to do just that. This sounds a bit
extreme, so we may re-phrase it as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a name="quote-least-privilege" href="#quote-least-privilege"&gt;&lt;/a&gt;
Each account should be provided the least number of required privileges
to do specific tasks under that account and should not be used for
anything else outside the defined set of activities.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Again, if you include &amp;ldquo;becoming root&amp;rdquo; into the list of defined activities
it would kind of defeat the purpose, so please resist this temptation. :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;there should be a defined list of accounts which are allowed to do
    system-wide modifications (e.g. privileged accounts)&lt;/p&gt;
&lt;p&gt;In line with the previous bullet point, these accounts must be used for
these activities only (system updates, installing new software, modifying
system-wide configuration).  The expectation is that the privileged
accounts are used on occasion only;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;privileged accounts during their activities should not cross the security
    boundary with the less privileged accounts.&lt;/p&gt;
&lt;p&gt;This is needed to avoid attacks from the less privileged accounts toward
more privileged (e.g. process hijacking, file races, etc.). Unfortunately,
this point is a bit confusing without a proper explanation that may take
several blog posts to be fully covered, but in a nutshell it means that
root should not touch anything writable by the less privileged account.
Some examples of the bad and insecure behaviour include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;changing directory to a directory writable by non-root,&lt;/li&gt;
&lt;li&gt;executing scripts from a directory writable by non-root accounts or
    scripts that are writable by non-root,&lt;/li&gt;
&lt;li&gt;copying a file/directory from/to a directory writable by non-root
    accounts,&lt;/li&gt;
&lt;li&gt;and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if possible (and this is &lt;em&gt;highly&lt;/em&gt; recommended) privileged accounts should be
    accessed from the trusted and secure machines.&lt;/p&gt;
&lt;p&gt;It is really hard to define what the &amp;ldquo;trusted and secure machine&amp;rdquo; is, but
generally it should be assumed&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;that it is a laptop or a desktop station that is used entirely for the
    work purposes (no free time surfing on the leisure sites and stuff :) ),&lt;/li&gt;
&lt;li&gt;that proper firewall rules and protection techniques were used to secure
    the machine, and&lt;/li&gt;
&lt;li&gt;that the operator is security-minded and does everything they can to
     ensure integrity and security of their machine and software installed
     on it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would be really happy to answer any question in regard to this article and
provide any possible help in making our everyday system level activities more
secure, so do not hesitate to comment or &lt;a href="/contact"&gt;contact me&lt;/a&gt;.&lt;/p&gt;</content><category term="sudo"></category><category term="sudo"></category><category term="console"></category></entry><entry><title>SSH port-forwarding (Intermediate)</title><link href="https://dmitry.khlebnikov.net/2010/12/10/ssh-port-forwarding-intermediate/" rel="alternate"></link><published>2010-12-10T10:00:00+11:00</published><updated>2020-05-17T04:45:11+10:00</updated><author><name>(GalaxyMaster)</name></author><id>tag:dmitry.khlebnikov.net,2010-12-10:/2010/12/10/ssh-port-forwarding-intermediate/</id><summary type="html">&lt;p&gt;In my previous blog entry I described some basic functionality of SSH in terms
of port-forwarding. Now it&amp;rsquo;s time for a little bit more complex stuff.&lt;/p&gt;
&lt;p&gt;In this article I will highlight:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(forward) piercing of a firewall (getting access to resources behind it);&lt;/li&gt;
&lt;li&gt;dynamic port-forwarding (AKA proxy);&lt;/li&gt;
&lt;li&gt;(reverse) piercing of a firewall (exposing your local services on the remote side).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="forward-firewall-piercing"&gt;Forward firewall piercing&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with the forward firewall piercing, since it is the easiest and was
somewhat already described in my previous blog entry on this topic. Now,
imagine that you already have SSH access to some &lt;span class="truncated"&gt;&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my previous blog entry I described some basic functionality of SSH in terms
of port-forwarding. Now it&amp;rsquo;s time for a little bit more complex stuff.&lt;/p&gt;
&lt;p&gt;In this article I will highlight:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(forward) piercing of a firewall (getting access to resources behind it);&lt;/li&gt;
&lt;li&gt;dynamic port-forwarding (AKA proxy);&lt;/li&gt;
&lt;li&gt;(reverse) piercing of a firewall (exposing your local services on the remote side).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="forward-firewall-piercing"&gt;Forward firewall piercing&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with the forward firewall piercing, since it is the easiest and was
somewhat already described in my previous blog entry on this topic. Now,
imagine that you already have SSH access to some host which is multi-home
connected (e.g. the host is connected to more than one network). Let&amp;rsquo;s also
assume that the host is a firewall and is masquerading other hosts in the
internal network and is translating just a handful set of ports to the servers
(looks familiar, doesn&amp;rsquo;t it? :) ). In other words, we are speaking of a
standard firewall/NAT router.&lt;/p&gt;
&lt;p&gt;Now, how can you access port 12345 on host behind the firewall given that this
port is not &amp;ldquo;exported&amp;rdquo; by the NAT on the firewall? This is quite simple. Open a
terminal window on your local computer and type the following:&lt;/p&gt;
&lt;pre class="highlight" data-user="user"&gt;&lt;code class="language-shell"&gt;[user@localhost ~] ssh -L12345:192.168.1.2:12345 joe@firewall.domain.tld&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From now on, as long as your SSH session is up and running you will be able to
reach &lt;code&gt;192.168.1.2:12345&lt;/code&gt; by connecting to &lt;code&gt;localhost:12345&lt;/code&gt; (i.e. the &lt;code&gt;12345&lt;/code&gt;
port on your local computer). Indeed, for this to work you need SSH access
anywhere inside the protected network (not necessarily on the firewall itself)
and if the firewall blocks any SSH access, you are out of luck.&lt;/p&gt;
&lt;h2 id="dynamic-port-forwarding"&gt;Dynamic port-forwarding&lt;/h2&gt;
&lt;p&gt;There are at least two usage patterns where I find SSH&amp;rsquo;s ability to forward
requests to many ports useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I need to connect to different services (possibly on different hosts) inside
  the protected network (as per the configuration described above) and I don&amp;rsquo;t
  want to specify all of them on the command line;&lt;/li&gt;
&lt;li&gt;I need to access some resource which is Geo-protected (e.g. allows access
  from a particular part of the world), e.g. want to watch US Netflix being
  physically in Australia&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In both cases, you use the following SSH command in your terminal window:&lt;/p&gt;
&lt;pre class="highlight" data-user="user"&gt;&lt;code class="language-shell"&gt;[user@localhost ~]$ ssh -D3128 joe@relay.domain.tld&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As long as you SSH session is active, you can use port &lt;code&gt;3128&lt;/code&gt; on your local
machine as SOCKS4/SOCKS5 proxy (e.g. you can configure proxy settings in your
browser to use &lt;code&gt;localhost:3128&lt;/code&gt;) and browse the Net through your SSH connection,
and all your requests will look like they are coming from &lt;code&gt;relay.domain.tld&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are many uses for this: for example, some payment processors won&amp;rsquo;t allow
you to pay for goods if you are trying to pay through them from some countries
even if you are a legitimate user, another use case is when you are concerned
re: your privacy &amp;ndash; you can conceal your actual location by building a chain of
SSH tunnels and access the desired web site through this chain :) .&lt;/p&gt;
&lt;h2 id="reverse-firewall-piercing"&gt;Reverse firewall piercing&lt;/h2&gt;
&lt;p&gt;Finally, what if you are behind a very strict firewall that limits almost
everything, but you need to provide some services to the outside world from
your computer (e.g. sharing your access to company&amp;rsquo;s confidential information
to folks from WikiLeaks&amp;hellip; just kidding :) )?&lt;/p&gt;
&lt;p&gt;To achieve this you need to have an SSH account somewhere in the Net &amp;ndash; just
Google for &amp;ldquo;free ssh account&amp;rdquo; and you will surely find one for yourself).&lt;/p&gt;
&lt;p&gt;Now, when you have the account, you can execute the following on your local
computer (which is inside that highly secure network :) ):&lt;/p&gt;
&lt;pre class="highlight" data-user="user"&gt;&lt;code class="language-shell"&gt;[user@localhost ~]$ ssh -R:60000:127.0.0.1:22 joe@friendly.domain.tld&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above command will setup such a configuration that connecting on port &lt;code&gt;60000&lt;/code&gt;
at &lt;code&gt;friendly.domain.tld&lt;/code&gt; will forward traffic to your local machine&amp;rsquo;s port 22
(which is behind a firewall) &amp;ndash; this will work as long as your SSH session to
the &lt;code&gt;friendly.domain.tld&lt;/code&gt; is active.  Unfortunately, there are several pitfalls
in this approach, but they are all resolvable.&lt;/p&gt;
&lt;p&gt;Firstly, you need to ensure that &lt;code&gt;friendly.domain.tld&lt;/code&gt; is using a recent version
of SSH daemon, otherwise you will be limited to bind only to the loopback
interface on the remote host.&lt;/p&gt;
&lt;p&gt;Secondly, even if they are using a recent version of the SSH daemon, they can
disallow such binding (e.g. setting &amp;ldquo;GatewayPorts no&amp;rdquo; in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;),
and, again, you will be restricted to the loopback interface only.&lt;/p&gt;
&lt;p&gt;Finally, you need to find such a friendly host which allows you to connect to
the bound ports from the outside (many public ones have a firewall rule
preventing such access in order to prevent abuses of their services).&lt;/p&gt;
&lt;p&gt;All in all, the best option to try this is to have your own host somewhere (e.g.
purchase a small virtual environment from some hosting provider or create an
instance on AWS EC2), then you will be able to configure the remote side the
way you want it!&lt;/p&gt;
&lt;p&gt;Anyway, even if you fail to find a host that allows you to expose your service
to the public, you still should be able to access it yourself &amp;ndash; using the
forward firewall piercing technique described at the beginning of this post:&lt;/p&gt;
&lt;pre class="highlight" data-user="user" data-prompt=""[user@localhost"&gt;&lt;code class="language-shell"&gt;# from your home computer
[user@localhost ~]$ ssh -L60000:127.0.0.1:60000 joe@friendly.domain.tld&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it is done your computer in the highly secure network should be reachable
via SSH on your &lt;code&gt;localhost:60000&lt;/code&gt;, e.g.&lt;/p&gt;
&lt;pre class="highlight" data-user="user"&gt;&lt;code class="language-shell"&gt;[user@localhost ~] ssh -p6000 my_account@localhost&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;my_account&lt;/code&gt; is a user allowed to SSH into your computer in the highly
secure network.&lt;/p&gt;</content><category term="ssh"></category></entry><entry><title>SSH port-forwarding (Basic)</title><link href="https://dmitry.khlebnikov.net/2010/11/29/ssh-port-forwarding-basic/" rel="alternate"></link><published>2010-11-29T10:00:00+11:00</published><updated>2020-05-17T04:45:11+10:00</updated><author><name>(GalaxyMaster)</name></author><id>tag:dmitry.khlebnikov.net,2010-11-29:/2010/11/29/ssh-port-forwarding-basic/</id><summary type="html">&lt;p&gt;I think all of you are using SSH in your daily routines. However, do you use
its full potential? Today&amp;rsquo;s topic is the SSH port-forwarding feature and how
it can be use to achieve some interesting configurations.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure most of you are aware of the feature, but how many of you are using
it? Personally, I&amp;rsquo;m a bit obsessed with it and have found numerous cases where
this feature of SSH is a real life saver.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with simple things and imagine that you have a server where you
are running MySQL (as a &lt;span class="truncated"&gt;&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I think all of you are using SSH in your daily routines. However, do you use
its full potential? Today&amp;rsquo;s topic is the SSH port-forwarding feature and how
it can be use to achieve some interesting configurations.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure most of you are aware of the feature, but how many of you are using
it? Personally, I&amp;rsquo;m a bit obsessed with it and have found numerous cases where
this feature of SSH is a real life saver.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with simple things and imagine that you have a server where you
are running MySQL (as a backend for your website) and that you are not
comfortable to work with MySQL neither through the MySQL command line interface
nor through a web-interace like phpMyAdmin. Instead you prefer to use, say,
MySQL WorkBench or something similar running on your local computer.&lt;/p&gt;
&lt;p&gt;How one could do this? Well, I&amp;rsquo;ve seen a lot that people tend to configure the
MySQL server to listen on a public interface (i.e. an interface that is
reachable from the Internet), then access it from their computer directly.
It&amp;rsquo;s not that bad if you have a static &lt;abbr title="Internet Protocol"&gt;IP&lt;/abbr&gt; assigned to your computer and you
added a firewall rule protecting the MySQL port on the server to be reachable
from your &lt;abbr title="Internet Protocol"&gt;IP&lt;/abbr&gt; address only, but what if you are behind some kind of NAT and the
same &lt;abbr title="Internet Protocol"&gt;IP&lt;/abbr&gt; address is shared among others in your network? What if you don&amp;rsquo;t have
a static &lt;abbr title="Internet Protocol"&gt;IP&lt;/abbr&gt; and the dynamic &lt;abbr title="Internet Protocol"&gt;IP&lt;/abbr&gt; range assigned by your ISP is too broad?
Overall, I personally don&amp;rsquo;t like running MySQL on a public interface since
there were publicly known security vulnerabilities in the MySQL binary
protocol, and I can assure you there will be more discovered over the time.&lt;/p&gt;
&lt;p&gt;So, what should we do to access our remote database securely and conveniently?
Run the MySQL server on 127.0.0.1:3306 (well, if your web server is located on
another machine, you may want to bind MySQL to some internal interface &amp;ndash; the
network that links your servers only, e.g. 192.168.1.1:3306), and then use the
SSH port-forwarding feature to setup a tunnel between your remote database and
your local computer:&lt;/p&gt;
&lt;pre class="highlight" data-user="root"&gt;&lt;code class="language-shell"&gt;[root@localhost ~]# ssh -L3306:127.0.0.1:3306 user@server&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, &lt;code&gt;-L3306:127.0.0.1:3306&lt;/code&gt; says that we want &lt;code&gt;127.0.0.1:3306&lt;/code&gt; to be &amp;ldquo;mapped&amp;rdquo;
to our local host to port &lt;code&gt;3306&lt;/code&gt;. While the SSH session is active any packet
sent to &lt;code&gt;localhost:3306&lt;/code&gt; (on your computer) will be forwarded over the SSH
encrypted channel to the remote server and then will be fed to remote&amp;rsquo;s
&lt;code&gt;127.0.0.1:3306&lt;/code&gt;.  This means that as long as your SSH session is alive you
will be able to work with the remote MySQL server like it&amp;rsquo;s running on your
local computer and you can use any MySQL tools locally.&lt;/p&gt;
&lt;p&gt;Well, the above command was given for Linux, Mac OSX, and other Unix-based
systems. For Windows, you can use PuTTY to achive the same. I found the
following &lt;a href="https://www.akadia.com/services/ssh_putty.html"&gt;instructions for PuTTY&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;OK, this is not a new topic and it was described many times here and there on
the Internet, but I decided to write this article as a foundation for my
further articles on this topic which will cover more advanced usage of the SSH
port-forwarding feature. For example, I intend to document a configuration of
the MySQL replication setup between two servers located at two different data
centres where each server is a part of a server farm protected by a firewall.&lt;/p&gt;</content><category term="ssh"></category><category term="ssh"></category><category term="console"></category><category term="bastion"></category></entry><entry><title>HOWTO: VMware Player as a remote console (VNC)</title><link href="https://dmitry.khlebnikov.net/2010/11/24/howto-vmware-player-as-a-remote-console-vnc/" rel="alternate"></link><published>2010-11-24T10:00:00+11:00</published><updated>2020-05-17T20:25:15+10:00</updated><author><name>(GalaxyMaster)</name></author><id>tag:dmitry.khlebnikov.net,2010-11-24:/2010/11/24/howto-vmware-player-as-a-remote-console-vnc/</id><summary type="html">&lt;p&gt;Turning VMware Player into a non-privileged VNC client to access VMware VMs from a Linux-based PC&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since I am doing a lot of remote systems administration tasks due to the nature
of my IT consulting work and since I am also running Linux on all my computers
I was looking for a native way how to get a remote console to VMware VMs from
linux.&lt;/p&gt;
&lt;p&gt;After some searching I found that &lt;a href="http://www.vmware.com/go/downloadplayer/"&gt;VMware Player&lt;/a&gt; (which has native binaries for
Linux) can be used as a VNC client to get to VMs consoles. However, once I have
downloaded VMware Player&amp;rsquo;s bundle and was faced with its requirement to run the
installation script as root I became quite unhappy with an idea of running some
proprietary software on my machine as root, especially after looking into the
bundle and the way the installation script was written. Moreover, there was no
need for other parts of &lt;a href="http://www.vmware.com/go/downloadplayer/"&gt;VMware Player&lt;/a&gt; &amp;ndash; I just wanted to have a small tool to
be able to hook the remote consoles up under my lovely Linux environment.
Therefore, I decided to take a challenge and to tweak the installation so it
will be possible to install the whole thing as a non-privileged user. Another
sub-goal was to strip the installation further down and prepare a small package
with only components needed for remote console sessions.&lt;/p&gt;
&lt;p&gt;If you are not concerned about security (and integrity) of your system, e.g.
you are fine with the re-installation of the whole system, then it will be
cheaper to just install the &lt;a href="http://www.vmware.com/go/downloadplayer/"&gt;VMware Player&lt;/a&gt; under the root account. In this case
you don&amp;rsquo;t need to read any further since what I am describing below is for
those brave hearts who value their systems and who do not want to give a chance
to mess their systems up by running low-quality custom installation scripts as
root.&lt;/p&gt;
&lt;p&gt;Well, if you are still reading, then I hope that my research on this topic and
the how-to I have spent considerable time to come up with is worth something
and will be of some help to you.&lt;/p&gt;
&lt;p&gt;Our starting point is a Linux-based system (it does not matter what
distribution you are running, but I did everything on a customised &lt;a href="https://en.altlinux.org/"&gt;ALT Linux&lt;/a&gt;&amp;lsquo;s
RPM-based distribution) running on an x86 compatible hardware (mine was 32-bit,
but I see no issues with 64-bit ones).&lt;/p&gt;
&lt;p&gt;The first step is to download &lt;a href="http://www.vmware.com/go/downloadplayer/"&gt;VMware Player&lt;/a&gt; for your architecture, set proper
permissions on the downloaded file, and then extract the payload as follows
(you need to ensure that you have at least 40MB of free space on &lt;code&gt;/tmp&lt;/code&gt;, BTW):&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ chmod 0700 ./VMware-Player-3.1.3.324285.i386.bundle
$ ./VMware-Player-3.1.3-324285.i386.bundle --console -x $(pwd)/vmplayer
Extracting VMware Installer...done.
No protocol specified
No protocol specified
$ ls -l vmplayer
total 20
drwxr-xr-x  8 vmware vmware 4096 Nov 23 09:01 vmware-installer
drwxr-xr-x  4 vmware vmware 4096 Nov 23 09:01 vmware-ovftool
drwxr-xr-x  5 vmware vmware 4096 Nov 23 09:01 vmware-player
drwxr-xr-x 11 vmware vmware 4096 Nov 23 09:01 vmware-player-app
drwxr-xr-x  3 vmware vmware 4096 Nov 23 09:01 vmware-player-setup&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far so good. We now have the whole bundle unacked into the specified
directory and we are interested in just two subdirectories: &lt;code&gt;vmware-player&lt;/code&gt; and
&lt;code&gt;vmware-player-app&lt;/code&gt;, the rest is not related to the functionality we are
looking for.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s pick up all parts from which we will build our future &amp;ldquo;VMware remote
console&amp;rdquo; tool. To make it easier create a dedicated subdirectory, e.g.
&lt;code&gt;vmrconsole&lt;/code&gt;, with the following structure:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ mkdir -m700 ~/vmrconsole
$ mkdir -m700 ~/vmrconsole/{bin,etc,lib,share}
$ ls -l ~/vmrconsole
total 12
drwx------ 2 vmware vmware 4096 Nov 24 01:21 bin
drwx------ 2 vmware vmware 4096 Nov 24 01:21 etc
drwx------ 2 vmware vmware 4096 Nov 24 01:21 lib
drwx------ 2 vmware vmware 4096 Nov 24 01:21 share&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From now on we are going to populate these directories with files from the
unpacked bundle.&lt;/p&gt;
&lt;p&gt;The first file we are interested in is &lt;code&gt;appLoader&lt;/code&gt; &amp;ndash; this is the primary
executable by the way, we need to copy it to our bin directory and then try to
run it:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ cp ~/vmplayer/vmware-player-app/lib/bin/appLoader ~/vmrconsole/bin/
$ chmod 0700 ~/vmrconsole/bin/appLoader
$ ln -s appLoader ~/vmrconsole/bin/vmplayer
$ ~/vmrconsole/bin/vmplayer 
$ echo $?
255
$&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Huh, this is not very informative, is it? The binary silently exits with error
code of 255. Well, you may get other errors at this stage if you don&amp;rsquo;t have all
the required shared libraries installed on you system &amp;ndash; however I doubt it
since the requirements of this binary are pretty reasonable: glibc and zlib.&lt;/p&gt;
&lt;p&gt;OK, let&amp;rsquo;s take a peek inside and figure out what is going on (originally I used
strace with logging to a file, but to keep this article reasonable short I am
highlighting important things only):&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ strace -f -eopen ~/vmrconsole/bin/vmplayer 2&amp;gt;&amp;amp;1 | tail -2
open(&amp;quot;/etc/localtime&amp;quot;, O_RDONLY)        = 6
open(&amp;quot;/etc/vmware/config&amp;quot;, O_RDONLY|O_LARGEFILE) = -1 EACCES (Permission denied)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It looks that vmplayer wants to access a global config file and does not try to
look for an alternative, home directory based one. Well, this is understandable
since VMware folks did not expect it to be run as a non-privileged process, but
we need to deal with this somehow. What are our options here? The simpliest
option I could think of at the moment is to substitute the hardcoded absolute
path inside the binary with something relative:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ strings ~/vmrconsole/bin/appLoader | fgrep /etc/vmware | uniq -c
      1 /etc/vmware/config
      1 /etc/vmware/icu
      1 /etc/vmware/ssl/rui.crt
      1 /etc/vmware/ssl/rui.key
      1 /etc/vmware/ssl/dh512.pem
      1 /etc/vmware/ssl/dh1024.pem
$ sed -i 's,/etc/vmware,..//////etc,g' ~/vmrconsole/bin/appLoader&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The trick here is to substitute one string with another of the same length (we
are modifying a binary so we do not want to mess offsets up) and luckily enough
we can use whatever number of slashes we want &amp;ndash; they all are considered as a
single separator nevertheless. OK, we could have used a hex editor and could
have terminated strings with a NULL byte, but the point is that the approach I
took is the quickest and is working well. Let&amp;rsquo;s run the modified binary through
strace again, but this time we need to be prepared for the changed behaviour:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ cd ~/vmrconsole/bin/
$ touch ../etc/config
$ strace -f -emkdir,lstat,open,write ./vmplayer 2&amp;gt;&amp;amp;1 | tail -12
mkdir(&amp;quot;/tmp/.private/vmware/vmware-vmplayer&amp;quot;, 0700) = -1 EEXIST (File exists)
open(&amp;quot;/tmp/.private/vmware/vmware-vmplayer/appLoader-9245.log&amp;quot;, O_RDWR|O_CREAT|O_APPEND|O_LARGEFILE, 0644) = 5
open(&amp;quot;/etc/localtime&amp;quot;, O_RDONLY)        = 6
write(5, &amp;quot;Nov 24 01:53:09.824: app-3077760&amp;quot;..., 121) = 121
write(5, &amp;quot;Nov 24 01:53:09.824: app-3077760&amp;quot;..., 60) = 60
write(5, &amp;quot;Nov 24 01:53:09.824: app-3077760&amp;quot;..., 71) = 71
write(5, &amp;quot;Nov 24 01:53:09.824: app-3077760&amp;quot;..., 57) = 57
write(5, &amp;quot;\&amp;quot;\n&amp;quot;, 2)                     = 2
write(5, &amp;quot;Nov 24 01:53:09.825: app-3077760&amp;quot;..., 82) = 82
open(&amp;quot;..//////etc/config&amp;quot;, O_RDONLY|O_LARGEFILE) = 6
write(5, &amp;quot;Nov 24 01:53:09.825: app-3077760&amp;quot;..., 89) = 89
write(5, &amp;quot;Nov 24 01:53:09.825: app-3077760&amp;quot;..., 73) = 73&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks better, does not it? Our binary found the config file and was able to
open it, however it still produces no output, but it reports something to a log
file:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ tail -7 /tmp/.private/vmware/vmware-vmplayer/appLoader-9245.log
Nov 24 01:53:09.824: app-3077760704| Log for VMware Workstation pid=9245 version=7.1.3 build=build-324285 option=Release
Nov 24 01:53:09.824: app-3077760704| The process is 32-bit.
Nov 24 01:53:09.824: app-3077760704| Host codepage=utf8 encoding=UTF-8
Nov 24 01:53:09.824: app-3077760704| Calling: &amp;quot;./vmplayer&amp;quot;
Nov 24 01:53:09.825: app-3077760704| Using configuration file ..//////etc/config.
Nov 24 01:53:09.825: app-3077760704| libdir entry was not present in ..//////etc/config.
Nov 24 01:53:09.825: app-3077760704| Unable to lookup library directory.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I do not know much about VMware Players config file but according to the log
message it wants some variable called &lt;code&gt;libdir&lt;/code&gt; and this variable should point
to the library directory, so let&amp;rsquo;s introduce such a variable and try to execute
the binary again:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ echo 'libdir = ..' &amp;gt;&amp;gt; ../etc/config
$ strace -f -emkdir,lstat,open,write ./vmplayer 2&amp;gt;&amp;amp;1 | tail -4
write(5, &amp;quot;LOG NOT INITIALIZED | LoadLibrar&amp;quot;..., 73) = 73
open(&amp;quot;../lib/libvmplayer.so/libvmplayer.so&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
write(5, &amp;quot;LOG NOT INITIALIZED | Error load&amp;quot;..., 153) = 153
write(5, &amp;quot;LOG NOT INITIALIZED | Could not &amp;quot;..., 74) = 74&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope you have noticed that I have used a relative path for the library
directory in the config file and this means that we always should run the
binary with its directory being the current working directory. This is a bit
inconvenient, but we will solve this with a wrapper script later. Right now, we
need to get it working and we see that it tried to dynamically load some
library from the library directory. OK, let&amp;rsquo;s search for this library in the
unpacked bundle directory and copy the library file over to our tree:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ find ~/vmplayer -name libvmplayer.so
/home/vmware/vmplayer/vmware-player-app/lib/lib/libvmplayer.so
/home/vmware/vmplayer/vmware-player-app/lib/lib/libvmplayer.so/libvmplayer.so
$ cp -a ~/vmplayer/vmware-player-app/lib/lib/libvmplayer.so ~/vmrconsole/lib/
$ ldd ~/vmrconsole/lib/libvmplayer.so/libvmplayer.so | fgrep 'not found'
 libview.so.2 =&amp;gt; not found
 libcds.so =&amp;gt; not found
 libvmwarebase.so.0 =&amp;gt; not found
 libvmwareui.so.0 =&amp;gt; not found
 libgvmomi.so.0 =&amp;gt; not found&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last command showed that &lt;code&gt;libvmplayer.so&lt;/code&gt; depends on some libraries and
that their locations are currently unknown to the system. In order to solve
this there are two things we need to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We need to tell the system where it should search for the libraries;&lt;/li&gt;
&lt;li&gt;We need to locate these libraries and put them into a directory where the
   system will find them.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To accomplish the first thing we need to create a wrapper script around
vmplayer and use this script for fine-tuning later. Here is the very basic
script for this purpose (created as &lt;code&gt;~/vmrconsole/bin/loader.sh&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight" data-file="~/vmrconsole/bin/loader.sh"&gt;&lt;code class="language-bash"&gt;#!/bin/bash

# We must run vmplayer from the directory it resides in since all
# relative paths are solved from there.
ORIG_NAME=&amp;quot;${BASH_SOURCE##*/}&amp;quot;
ABS_NAME=$(readlink -e $BASH_SOURCE) || exit 1
VMW_BINDIR=&amp;quot;${ABS_NAME%/*}&amp;quot;
VMW_LIBDIR=&amp;quot;$VMW_BINDIR/../lib&amp;quot;

# check that directories exist, if not notify the user
if [ ! -d &amp;quot;$VMW_BINDIR&amp;quot; ]; then
    echo &amp;quot;ERROR: cannot determine the directory where this script resides!&amp;quot; &amp;gt;&amp;amp;2
    exit 1
fi

# preserve the current working directory
OLD_PWD=&amp;quot;$PWD&amp;quot;

if ! cd &amp;quot;$VMW_LIBDIR&amp;quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 ; then
    echo &amp;quot;ERROR: the '$VMW_LIBDIR' directory does not exist!&amp;quot; &amp;gt;&amp;amp;2
    exit 1
fi

# resolve the library directory path (to get rid off ../ inside of it)
VMW_LIBDIR=$(pwd -P 2&amp;gt;/dev/null)
if [ $? -ne 0 -o ! -d &amp;quot;$VMW_LIBDIR&amp;quot; ]; then
    echo &amp;quot;ERROR: could not resolve the '$VMW_LIBDIR' directory path!&amp;quot; &amp;gt;&amp;amp;2
    exit 1
fi

# return back since it possible that we were called as ./vmrconsole
if ! cd &amp;quot;$OLD_PWD&amp;quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 ; then
    echo &amp;quot;ERROR: could not return to the original '$OLD_PWD' directory!&amp;quot; &amp;gt;&amp;amp;2
    exit 1
fi

# we don't need the following variable anymore
unset OLD_PWD

# change the current directory to $VMW_BINDIR
if ! cd &amp;quot;$VMW_BINDIR&amp;quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 ; then
    echo &amp;quot;ERROR: failed to change directory to '$VMW_BINDIR'!&amp;quot; &amp;gt;&amp;amp;2
    exit 1
fi

# set the library search path so the dynamic linker will be able
# to locate locally installed libraries.
LD_LIBRARY_PATH=&amp;quot;$VMW_LIBDIR${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}&amp;quot;
export LD_LIBRARY_PATH

# execute the real binary and pass the supplied arguments to it
exec -a &amp;quot;$ORIG_NAME&amp;quot; ./appLoader &amp;quot;$@&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This wrapper script should not be called directly, instead we need to create a
symbolic link to this wrapper, e.g. for vmplayer the following should be
performed:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ ln -sf loader.sh ~/vmrconsole/bin/vmplayer&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since our vmplayer is not a full scale VMware Player I suggest to create
another small wrapper script and name it &lt;code&gt;vmrconsole&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ cat ~/vmrconsole/bin/vmrconsole
#!/bin/bash
ABS_NAME=$(readlink -e $BASH_SOURCE) || exit 1
BINDIR=&amp;quot;${ABS_NAME%/*}&amp;quot;
exec &amp;quot;$BINDIR/vmplayer&amp;quot; -h &amp;quot;$@&amp;quot;
$ chmod 0700 ~/vmrconsole/bin/vmrconsole&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to populate our library directory with the needed libraries. It is
a bit tricky to describe since on different systems you will likely end up with
different sets of libraries inside our local directory. For example, on my
system I have quite a few of the libraries installed from the distribution
repositories and these versions of libraries are fresher and with many bug
fixes in comparison to the VMWare provided ones.&lt;/p&gt;
&lt;p&gt;Anyway, the general approach to install missing libraries is the following &amp;ndash;
we start with the libraries we determined as missing during our &lt;code&gt;ldd
~/vmrconsole/lib/libvmplayer.so/libvmplayer.so | fgrep 'not found'&lt;/code&gt; step (we
need to locate and copy them over to our library directory):&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ ldd ~/vmrconsole/lib/libvmplayer.so/libvmplayer.so | fgrep 'not found' | awk '{ print $1; }' | xargs -i find ~/vmplayer -type f -name '{}' -execdir cp -avL '{}' ~/vmrconsole/lib/ \;
`libview.so.2' -&amp;gt; `/home/vmware/vmrconsole/lib/libview.so.2'
`libcds.so' -&amp;gt; `/home/vmware/vmrconsole/lib/libcds.so'
`libvmwarebase.so.0' -&amp;gt; `/home/vmware/vmrconsole/lib/libvmwarebase.so.0'
`libvmwareui.so.0' -&amp;gt; `/home/vmware/vmrconsole/lib/libvmwareui.so.0'
`libgvmomi.so.0' -&amp;gt; `/home/vmware/vmrconsole/lib/libgvmomi.so.0'&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once this is done we need to follow the following loop until there is no output
from the command listed below (in fact, on my system this step was not needed
since I had all dependencies in place already, but it is harmless to execute
this command anyway):&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ LD_LIBRARY_PATH=~/vmrconsole/lib ldd ~/vmrconsole/lib/* 2&amp;gt;/dev/null | fgrep 'not found' | awk '{ print $1; }' | xargs -i find ~/vmplayer -type f -name '{}' -execdir cp -avL '{}' ~/vmrconsole/lib/ \;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we try to access any remote VM&amp;rsquo;s console it will be clear that some parts
are still missing:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ vmrconsole 192.168.70.31
Failed to open file '/usr/lib/vmware/share/pixmaps/progress.png': No such file or directory
Failed to open file '/usr/lib/vmware/share/pixmaps/eula.png': No such file or directory
Failed to open file '/usr/lib/vmware/share/pixmaps/stream-spinner.png': No such file or directory
Failed to open file '/usr/lib/vmware/share/pixmaps/stream-spinner-stopped.png': No such file or directory
SSLLoadSharedLibrary: Failed to load library libcrypto.so.0.9.8:/home/vmplayer/vmrconsole/bin/libdir/lib/libcrypto.so.0.9.8/libcrypto.so.0.9.8: cannot open shared object file: No such file or directory&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;strace&lt;/code&gt; is our best friend here, just run the command through &lt;code&gt;strace&lt;/code&gt;,
examine the log file, and fix stuff properly:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ strace -f -eopen -o ~/strace.log vmrconsole 192.168.70.31 &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
$ less -n ~/strace.log
$ cd ~/vmrconsole/lib
$ fgrep -lr /vmware *
libcds.so
libgvmomi.so.0
libvmplayer.so/libvmplayer.so
libvmwarebase.so.0
libvmwareui.so.0
$ strings libcds.so | fgrep /vmware
/etc/vmware/bootstrap
/etc/vmware-installer/bootstrap
/etc/vmware-installer/database
$ sed -i 's,/etc/vmware/,..//////etc/,' libcds.so 
$ sed -i 's,/etc/vmware-installer/,..//////etc/installer/,' libcds.so 
$ strings libgvmomi.so.0 | fgrep /vmware
/etc/vmware/hostd/proxy.xml
/etc/vmware/icu
/etc/vmware/ssl/rui.crt
/etc/vmware/ssl/rui.key
/etc/vmware/ssl/dh512.pem
/etc/vmware/ssl/dh1024.pem
$ sed -i 's,/etc/vmware/,..//////etc/,g' libgvmomi.so.0
$ strings libvmplayer.so/libvmplayer.so | fgrep /vmware
/usr/lib/vmware
bin/vmware-vmrc-daemon
$ strings libvmwarebase.so.0 | fgrep /vmware
/etc/vmware/config
/usr/lib/vmware
/etc/vmware/icu
/etc/vmware/CVP
vmauthd/vmware-authd
/usr/sbin/vmware-authd
/var/run/vmware/authd_
/var/run/vmware
/etc/vmware/ssl/rui.crt
/etc/vmware/ssl/rui.key
/etc/vmware/ssl/dh512.pem
/etc/vmware/ssl/dh1024.pem
/var/run/vmware/usbarbitrator-socket
/usr/lib/vmware/settings
/usr/lib/vmware/config
bin/vmware-vmx
bin/vmware-vmx-debug
bin/vmware-vmx-stats
%s/vmware-speedtest-%d.tmp
/etc/vmware/vmware-ace/host.vmpl
/etc/vmware/vmware-ace/host-update.vmpl
/etc/vmware
$ sed -i 's,/etc/vmware/,..//////etc/,g' libvmwarebase.so.0 
$ sed -i 's,/etc/vmware,..//////etc,g' libvmwarebase.so.0 
$ sed -i 's,/usr/lib/vmware/,..//////////etc/,g' libvmwarebase.so.0 
$ sed -i 's,/var/run/vmware,..//////var/run,g' libvmwarebase.so.0 
$ strings libvmwareui.so.0 | fgrep /usr/lib/vmware
/usr/lib/vmware
$ strings libvmwareui.so.0 | fgrep /var/run/vmware
/var/run/vmware/fuse/%Lu.info
$ sed -i 's,/var/run/vmware,..//////var/run,g' libvmwareui.so.0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ufff, we did a lot of binary patching &amp;ndash; luckily, VMware binaries and libraries
are not calculating their checksums. Now, we need to put all this stuff we have
seen in the &lt;code&gt;strings&lt;/code&gt; output and during the execution of the program in place (in
accordance to our new relative paths):&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ find ~/vmplayer -name icu
/home/vmware/vmplayer/vmware-player-app/lib/icu
$ cp -aL /home/vmware/vmplayer/vmware-player-app/lib/icu ~/vmrconsole/etc/
$ mkdir -m700 ~/vmrconsole/etc/ssl
$ find ~/vmplayer -name CVP
$ mkdir -m700 ~/vmrconsole/var
$ mkdir -m700 ~/vmrconsole/var/run
$ find ~/vmplayer -name pixmaps
/home/vmware/vmplayer/vmware-player/lib/share/pixmaps
/home/vmware/vmplayer/vmware-player-app/lib/share/pixmaps
$ mkdir -m700 ~/vmrconsole/share/pixmaps
$ cp -aL /home/vmware/vmplayer/vmware-player-app/lib/share/pixmaps/* ~/vmrconsole/share/pixmaps/
$ cp -aL /home/vmware/vmplayer/vmware-player-app/lib/share/EULA.txt ~/vmrconsole/share/
$ cp -aL /home/vmware/vmplayer/vmware-player-app/lib/share/*.ui ~/vmrconsole/share/
$ cp -aL /home/vmware/vmplayer/vmware-player-app/lib/share/icons ~/vmrconsole/share/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this stage we should be able to launch the vmplayer program via our wrapper
script (I am launching it on a remote machine through SSH, but here I am
describing how it should look on the local console):&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ ~/vmrconsole/bin/vmplayer&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="VMware Player: main window" class="figure" src="https://dmitry.khlebnikov.net/images/howto-vmware-player-as-remote-console-01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;So far so good, but we need to resolve the issue with the OpenSSL library
dependency. To resolve the issue we need to create symbolic links from our
local library directory to the system-wide version of the OpenSSL library:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ ln -s /usr/lib/libcrypto.so.0.9.8 ~/vmrconsole/lib/
$ ln -s /usr/lib/libssl.so.0.9.8 ~/vmrconsole/lib/
$ ls -ld ~/vmrconsole/lib/lib*.so.0.9.8 
lrwxrwxrwx 1 vmware vmware 27 Nov 24 05:27 /home/vmware/vmrconsole/lib/libcrypto.so.0.9.8 -&amp;gt; /usr/lib/libcrypto.so.0.9.8
lrwxrwxrwx 1 vmware vmware 27 Nov 24 05:27 /home/vmware/vmrconsole/lib/libssl.so.0.9.8 -&amp;gt; /usr/lib/libssl.so.0.9.8&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s try to connect to remote VM&amp;rsquo;s console again:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ vmrconsole 192.168.70.31&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="VMware Player: credentials window" class="figure" src="https://dmitry.khlebnikov.net/images/howto-vmware-player-as-remote-console-02.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="VMware Player: MKS error message" class="figure" src="https://dmitry.khlebnikov.net/images/howto-vmware-player-as-remote-console-03.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Well, this error message does not say much except that we are not getting our
console :). If we check the log file directory we would see there is a file
called &lt;code&gt;player-XXXXX.log&lt;/code&gt; (where XXXXX is the PID of the VMware Player that
produced this log file). Inside the log file we may see some interesting parts
like the following (I have included only those messages which are related to our
task):&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-syslog"&gt;Nov 24 03:40:42.002: player| CDS error: Cannot locate VMIS, bootstrap file /etc/vmware-installer/bootstrap unavailable!
Nov 24 03:40:42.072: player| Unable to launch vmplayer-daemon: File does not exist.
Nov 24 03:40:42.072: player| Unable to find /home/vmplayer/bin/vmware-unity-helper in attempt to launch daemon.
Nov 24 03:41:04.630: player| Player dispatch: Opening VM while not connected to the daemon.
Nov 24 03:41:05.437: player| ConnectMksClient - calling VMClient_ConnectMksClientEx
Nov 24 03:41:05.437: player| VMClient_ConnectMksClientEx - trying local socket connection
Nov 24 03:41:05.444: player| Cnx_Connect: Returning false because CnxConnectAuthd failed
Nov 24 03:41:05.444: player| Cnx_Connect: Error message: Connection terminated by server
Nov 24 03:41:05.444: player| VMClient_ConnectMksClientEx - trying remote socket connection
Nov 24 03:41:05.611: player| VMClient_ConnectMksClientEx - connecting the MKS client
Nov 24 03:41:05.616: player| vmdbPipe_Streams: Couldn't read
Nov 24 03:41:15.941: player| Gdk: losing last reference to undestroyed window&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the messages quoted above it is quite clear that the program is trying to
launch some helper binaries/daemons in the background and to delegate the
actual remote console task to them. You can &lt;code&gt;strace&lt;/code&gt;/&lt;code&gt;ltrace&lt;/code&gt; the whole thing,
review the resulting logs and you will find that it tries to execute two helper
binaries: &lt;code&gt;vmware-authd&lt;/code&gt; and &lt;code&gt;vmware-remotemks&lt;/code&gt;, the latter is the remote
console engine, while the former is some kind of an authentication daemon and I
do not think it is needed for our purposes. I am not going to describe in
details how I arrived at the following (it is all clear once you have studied
the &lt;code&gt;strace&lt;/code&gt;/&lt;code&gt;ltrace&lt;/code&gt; log files):&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ find ~/vmplayer -name vmware-authd -o -name vmware-remotemks
/home/vmware/vmplayer/vmware-player-app/lib/bin/vmware-remotemks
/home/vmware/vmplayer/vmware-player-app/sbin/vmware-authd
$ mkdir -m700 ~/vmrconsole/vmauthd
$ ln -s `which true` ~/vmrconsole/vmauthd/vmware-authd
$ ls -ld ~/vmrconsole/vmauthd/vmware-authd
lrwxrwxrwx 1 vmware vmware 9 Nov 24 04:15 /home/vmware/vmrconsole/vmauthd/vmware-authd -&amp;gt; /bin/true
$ cp -aL ~/vmplayer/vmware-player-app/lib/bin/vmware-remotemks ~/vmrconsole/bin/
$ chmod 0700 ~/vmrconsole/bin/vmware-remotemks
$ strings ~/vmrconsole/bin/vmware-remotemks | fgrep /vmware
/usr/lib/vmware
/etc/vmware/config
/etc/vmware/icu
/etc/vmware/ssl/rui.crt
/etc/vmware/ssl/rui.key
/etc/vmware/ssl/dh512.pem
/etc/vmware/ssl/dh1024.pem
/etc/vmware/CVP
vmauthd/vmware-authd
/usr/sbin/vmware-authd
/var/run/vmware/authd_
/var/run/vmware
$ sed -i 's,/var/run/vmware,..//////var/run,g' ~/vmrconsole/bin/vmware-remotemks
$ sed -i 's,/etc/vmware/,..//////etc/,g' ~/vmrconsole/bin/vmware-remotemks&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another attempt:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ vmrconsole 192.168.70.31&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="VMware Player: hints messages" class="figure" src="https://dmitry.khlebnikov.net/images/howto-vmware-player-as-remote-console-04.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Ouch, we are presented by a bunch of hints (your mileage may vary since it
depends on the environment), but you surely will see the hint/error message
presented on the above screenshot.&lt;/p&gt;
&lt;p&gt;This is not a showstopper if you are an English-only user - just click on the
OK button and you should be able to work with the console, however I think it
is just a right thing to do to fix this little bugger:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ find ~/vmplayer -iname xkeymap
/home/vmware/vmplayer/vmware-player-app/lib/xkeymap
$ cp -aL /home/vmware/vmplayer/vmware-player-app/lib/xkeymap ~/vmrconsole/
$ cp -aL /home/vmware/vmplayer/vmware-player-app/lib/vnckeymap ~/vmrconsole/
$ vmrconsole 192.168.70.31&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="VMware Player: remote console window" class="figure" src="https://dmitry.khlebnikov.net/images/howto-vmware-player-as-remote-console-05.jpg"&gt;&lt;/p&gt;
&lt;p&gt;We are almost done! At least we achieved the goal we set at the beginning of
this article.&lt;/p&gt;
&lt;p&gt;Now, it is time to ensure that all file/directory permissions are strict enough
and to create a tarball, then place it somewhere so we will be able to use our
new tool when the right time comes:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-shell"&gt;$ cd ~/vmrconsole
$ find . -type d -execdir chmod 0700 '{}' \;
$ find . -type f -execdir chmod 0600 '{}' \;
$ chmod 0700 bin/*
$ cd
$ mv vmrconsole vmrconsole-3.1.3.324285
$ tar cjpf ~/vmrconsole-3.1.3.324285.i386.tar.bz2 vmrconsole-3.1.3.324285
$ ls -lh vmrconsole-3.1.3.324285.i386.tar.bz2 
-rw-r--r-- 1 vmware vmware 13M Nov 24 07:06 vmrconsole-3.1.3.324285.i386.tar.bz2&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;P.S. Oh, boy, it takes 2 hours to investigate and to come up with a solution,
then 8 hours to write an article to describe steps to reproduce! I hope that
somebody has found this article useful and I would appreciate any comments.&lt;/p&gt;</content><category term="hacking"></category></entry></feed>